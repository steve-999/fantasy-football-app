{"version":3,"sources":["redux/actionTypes.js","redux/rootReducer.js","redux/configureStore.js","environment/environment.js","redux/actionCreators.js","components/Navbar.js","components/Footer.js","components/PlayersForm.js","misc_functions.js","components/Players.js","components/PlayerStatsTable.js","components/LineChartPointsMA.js","components/BarPointsChart.js","components/PlayerInfo.js","components/TeamsStatsTable.js","components/Teams.js","components/TeamsContainer.js","components/Fixtures.js","components/FileNotFound.js","components/LeagueTable.js","components/Squad.js","components/LeaguesContainer.js","components/Glossary.js","components/Test.js","App.js","reportWebVitals.js","index.js"],"names":["LOADING_PLAYERS","ADD_PLAYERS","LOADING_FIXTURE_DIFFICULTY","ADD_FIXTURE_DIFFICULTY","LOADING_FIXTURE_LIST","ADD_FIXTURE_LIST","LOADING_TEAM_IDS","ADD_TEAM_IDS","LOADING_TEAMS_STATS","ADD_TEAMS_STATS","LOADING_TEAM_FIXTURE_LIST","ADD_TEAM_FIXTURE_LIST","LOADING_SQUAD_FOR_MANAGER_ID","ADD_SQUAD_FOR_MANAGER_ID","LOADING_MANAGER_CURR_SEASON","ADD_MANAGER_CURR_SEASON","LOADING_PLAYER_SEASON_STATS","ADD_PLAYER_SEASON_STATS","LOADING_PLAYER_GW_STATS","ADD_PLAYER_GW_STATS","LOADING_LEAGUE_INFO","ADD_LEAGUE_INFO","LOADING_LEAGUE_POINTS_FOR_GW","ADD_LEAGUE_POINTS_FOR_GW","LOADING_LIVE_DATA","ADD_LIVE_DATA","LOADING_SQUADS_FOR_LEAGUE_ID","ADD_SQUADS_FOR_LEAGUE_ID","LOADING_CURR_GW","ADD_CURR_GW","TOGGLE_SHOW_PLAYERS_FORM","SET_SHOW_PLAYERS_FORM_VAL","initialState","loading_players","players_data","loading_fixture_difficulty","fixture_difficulty_data","loading_fixture_list","fixture_list_data","loading_team_ids","team_ids_data","loading_teams_stats","teams_stats","undefined","loading_text_fixture_list","team_fixture_list","loading_squad_for_manager_id","squad_for_manager_id_data","loading_manager_curr_season","manager_curr_season_data","loading_player_season_stats","player_season_stats_data","loading_player_gw_stats","player_gw_stats_data","loading_league_info","league_info_data","loading_league_points_for_gw","league_points_for_gw_data","loading_live_data","live_data","loading_squads_for_league_id","squads_for_league_id_data","loading_curr_gw","curr_gw","show_players_form","store","createStore","state","action","type","ActionTypes","payload","loading_team_fixture_list","applyMiddleware","thunk","API_BASE_URL","fetch_team_ids","dispatch","a","url","fetch","resp","json","data","console","log","fetch_curr_gw","set_show_players_form_val","val","withRouter","props","useSelector","useDispatch","page_name","show_hamburger_bars","path","location","pathname","match","window","innerWidth","includes","className","to","activeClassName","icon","faBars","onClick","playersFormDivElement","document","querySelector","classList","remove","add","style","display","faInfoCircle","Footer","NUM_TOP_PLAYERS_OPTIONS","PlayersForm","selectedTeam","selectedPosition","topPlayersCheckboxChecked","numTopPlayers","initialNumTopPlayers","sortByKey","handleClickTeam","bind","handleClickPosition","handleTopPlayersSelectChange","this","setState","prevProps","e","dismissPlayersForm","target","innerText","value","create_query_string","history","push","playersFormRef","current","replace","key","position","team","num_top_rank","sort_by_key","JSX","map","bgColor","name","backgroundColor","teams","htmlFor","get_positions_JSX","get_teams_JSX","onChange","disabled","defaultValue","num","Component","connect","sort_LOD_by_key","LOD","sort_key","ascending","temp_list","sort","b","debounce","fn","ms","timer","clearTimeout","setTimeout","apply","arguments","keys_list","displayName","arrayKey","sortDirection","excluded_columns","max_width","cols","get_filtered_keys_list","cols_list","excluded_cols","window_width","excluded_cols_list","find","x","filter","Players","handleResize","_ismounted","filtered_keys_list","handleAnimationEnd","handleClosePlayersFormClick","playersFormContainer_ref","players","filteredPlayers","handleHeadingClick","getDefaultSortDirection","filter_and_sort_players_table","handleQueryParams","React","createRef","title","fetchPlayers","addEventListener","team_names","short_team_name_lookup","forEach","team_dict","short_name","search","processPlayersData","removeEventListener","convertedData","i","length","parseInt","parseFloat","toFixed","query_dict","query_string","query_array","slice","split","v","query_string_to_query_dict","state_update_obj","newSortByKey","preventDefault","dataset","arraykey","newUrl","replaceState","every","tempPlayers","obj","team_name","forceUpdate","data-arraykey","idx","web_name_id","web_name","Nplayers","getPlayersTableRow","onAnimationEnd","ref","updateFormState","getPlayersTableHeadingsRow","createPlayersTableRows","num_players","PlayerStatsTable","stats_values","pts_contrib","pts_contrib_pct","filtered_stats_info_keys","get_filtered_cols_list","season_stats_info_keys","headings_row_cells","item","heading_text","values_row_cells","pts_contrib_row_cells","pts_contrib_pct_row_cells","LineChartPointsMA","useState","chart_data","set_chart_data","useEffect","gw_data","Nma","var_name","labels","gw","round","data_total_pts","total_points","data_pts_ma","y","Array","fill","alpha","ema","tempObj","datasets","label","borderColor","borderWidth","pointStyle","pointBackgroundColor","showLine","load_gw_data","width","height","redraw","options","text","fontSize","legend","showLines","animation","duration","easing","BarPointsChart","Object","keys","Math","abs","d","config","scales","yAxes","ticks","beginAtZero","min","fontColor","fontWeight","maintainAspectRatio","MONTHS","season_stats_keys","season_stats_table_headings","gw_stats_table_keys_list","PlayerInfoTable","season_stats","displayVals","price","img_fname","photo","cells","src","alt","PlayerInfo","params","join","fixtures_dict","fixtures_data","fetch_player_season_stats","fetch_player_gw_stats","fetch_fixture_list","prevState","process_player_season_stats","process_player_gw_stats","process_fixture_list","goals_scored","assists","minutes","calc_player_stats_table_values","gw_stats","dict","game_id","team_h_name","team_a_name","team_h_score","team_a_score","res","get_stats_values","pts_for_positions","penalties_saved","GK","DEF","MID","FWD","penalties_missed","bonus","yellow_cards","red_cards","own_goals","get_pts_for_key","mins","reduce","acc","cur","get_pts_for_mins","saves","floor","get_pts_for_saves","goals_conceded","get_pts_for_goals_conceded","clean_sheets","get_pts_for_clean_sheets","calcPointsContribution","get_pts_contrib_percentage","fixtureInfo","fixture","dt","Date","kickoff_time","datetime","getDate","toString","padStart","getMonth","getFullYear","players_team","opposition","home_away","GF","GA","getPlayerResultsTableRow","getPlayerResultsTableHeadingsRow","createPlayerResultsTableRows","TeamsStatsTable","sorted_teams_stats","set_sorted_teams_stats","temp_teams_stats","substitution_headings","GF_ma_S","GF_ma_L","GA_ma_S","GA_ma_L","key_val","get_headings_row","row_cells","get_table_row","headings","FixturesTable","fixture_list","toUpperCase","set_team_name","team_code","set_team_code","team_name_val","fetch_team_fixture_list","team_ids","team_id_obj","team_id_dict","code","TeamsContainer","fetch_teams_stats","unique","arr","set_var","Set","get_colour_gradient_rgb","r","g","Fixtures","gws_remaining","teams_info","Nmax_games","fetch_fixture_difficulty","process_fixture_difficulty_data","teams_data","process_teams_data","fixtures","toISOString","home_teams","away_teams","concat","game","home_team","opponent","difficulty_defence","difficulty_GF_A","difficulty_attack","difficulty_GA_A","difficulty_defence_color","difficulty_attack_color","away_team","difficulty_GF_H","difficulty_GA_H","max","short_team_name","suffix","difficulty_score","div_height","attack_defence","row","row_height","getGameJSX","Ngames","temp","unshift","getTableRows","create_fixtures_table","FileNotFound","justifyContent","alignItems","minHeight","LeagueTable","league_id","manager_ids","league_table_dict","league_name","table_heading_cells","col_name","table_headings_row","start_idx","manager_id","key_name","toLowerCase","table_body_rows","TOTALS_BG_COLOR","keys_info_list","stats_info_list","player_info_headings","player_info_keys","stats_headings","stats_keys","Squad","get_table_headings_row","player_info_th_cells","k","stats_th_cells","get_table_row_dict","player","row_dict","player_id","captain","team_info","chip_status","vice_captain","curr_gw_game","game_status","on_bench","captain_status","squad_dict","stats","create_table_row","row_bg_color","class_name","textAlign","padding","margin","create_totals_row","totals_dict","teams_lookup","manager_id_as_array","squads_dict","squad","did_play","totals","player_ids","firstXI_player_ids","final_firstXI","substitute_player_ids","squad_lookup","totals_row","firstXI_LOD","substitute_LOD","firstXI_totals_dict","calc_stats_totals","substitute_totals_dict","firstXI_rows","substitute_rows","get_table_rows","get_game_status","game_start_datetime","game_datetime","curr_datetime","game_date_time_array","game_starttime_array","game_endtime_array","game_endtime","game_end_datetime","LeaguesContainer","league_info","league_squads_dict","live_data_dict","fetch_league_info","fetch_live_data","fetch_squads_for_league_id","create_league_table_dict","key_field","create_lookup_dict","elements","calculate_league_table_dict","squads_for_league_id","create_league_squads_dict","result","calcSubstitutesPoints","calcTotalPoints","new_manager_ids","sort_manager_ids_by_total_pts","empty_table_obj","rank","manager","prev_pts","curr_pts","pts_deducted","sub_pts","total_pts","managers_curr_gw_info","manager_name","last_rank","points_deducted","prev_gw_points","new_player_dict","manager_data","player_info","explain","captain_did_not_play","curr_points","points","player_dict","did_not_play_array","game_dict","check_team_meets_squad_criteria","firstXI","num_positions","add_did_play_property_to_squads","subs","firstXI_player_ids_set","num_subs_points","j","new_firstXI","has","clear","manager_ids_points","exact","terms","Glossary","Test","color","App","set_window_width","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bc074635.chunk.js","sourcesContent":["export const LOADING_PLAYERS = 'LOADING_PLAYERS';\r\nexport const ADD_PLAYERS = 'ADD_PLAYERS';\r\n\r\nexport const LOADING_FIXTURE_DIFFICULTY = 'LOADING_FIXTURE_DIFFICULTY';\r\nexport const ADD_FIXTURE_DIFFICULTY = 'ADD_FIXTURE_DIFFICULTY';\r\n\r\nexport const LOADING_FIXTURE_LIST = 'LOADING_FIXTURE_LIST';\r\nexport const ADD_FIXTURE_LIST = 'ADD_FIXTURE_LIST';\r\n\r\nexport const LOADING_TEAM_IDS = 'LOADING_TEAM_IDS';\r\nexport const ADD_TEAM_IDS = 'ADD_TEAM_IDS';\r\n\r\nexport const LOADING_TEAMS_STATS = 'LOADING_TEAMS_STATS';\r\nexport const ADD_TEAMS_STATS = 'ADD_TEAMS_STATS';\r\n\r\nexport const LOADING_TEAM_FIXTURE_LIST = 'LOADING_TEAM_FIXTURE_LIST';\r\nexport const ADD_TEAM_FIXTURE_LIST = 'ADD_TEAM_FIXTURE_LIST';\r\n\r\nexport const LOADING_SQUAD_FOR_MANAGER_ID = 'LOADING_SQUAD_FOR_MANAGER_ID';\r\nexport const ADD_SQUAD_FOR_MANAGER_ID = 'ADD_SQUAD_FOR_MANAGER_ID';\r\n\r\nexport const LOADING_MANAGER_CURR_SEASON = 'LOADING_MANAGER_CURR_SEASON';\r\nexport const ADD_MANAGER_CURR_SEASON = 'ADD_MANAGER_CURR_SEASON';\r\n\r\nexport const LOADING_PLAYER_SEASON_STATS = 'LOADING_PLAYER_SEASON_STATS';\r\nexport const ADD_PLAYER_SEASON_STATS = 'ADD_PLAYER_SEASON_STATS';\r\n\r\nexport const LOADING_PLAYER_GW_STATS = 'LOADING_PLAYER_GW_STATS';\r\nexport const ADD_PLAYER_GW_STATS = 'ADD_PLAYER_GW_STATS';\r\n\r\nexport const LOADING_LEAGUE_INFO = 'LOADING_LEAGUE_INFO';\r\nexport const ADD_LEAGUE_INFO = 'ADD_LEAGUE_INFO';\r\n\r\nexport const LOADING_LEAGUE_POINTS_FOR_GW = 'LOADING_LEAGUE_POINTS_FOR_GW';\r\nexport const ADD_LEAGUE_POINTS_FOR_GW = 'ADD_LEAGUE_POINTS_FOR_GW';\r\n\r\nexport const LOADING_LIVE_DATA = 'LOADING_LIVE_DATA';\r\nexport const ADD_LIVE_DATA = 'ADD_LIVE_DATA';\r\n\r\nexport const LOADING_SQUADS_FOR_LEAGUE_ID = 'LOADING_SQUADS_FOR_LEAGUE_ID';\r\nexport const ADD_SQUADS_FOR_LEAGUE_ID = 'ADD_SQUADS_FOR_LEAGUE_ID';\r\n\r\nexport const LOADING_CURR_GW = 'LOADING_CURR_GW';\r\nexport const ADD_CURR_GW = 'ADD_CURR_GW';\r\n\r\nexport const TOGGLE_SHOW_PLAYERS_FORM = 'TOGGLE_SHOW_PLAYERS_FORM';\r\n\r\nexport const SET_SHOW_PLAYERS_FORM_VAL = 'SET_SHOW_PLAYERS_FORM_VAL';\r\n\r\n","import * as ActionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    loading_players: false,\r\n    players_data: [],\r\n    loading_fixture_difficulty: false,\r\n    fixture_difficulty_data: [],\r\n    loading_fixture_list: false,\r\n    fixture_list_data: [],\r\n    loading_team_ids: false,\r\n    team_ids_data: [],\r\n    loading_teams_stats: false,\r\n    teams_stats: undefined,\r\n    loading_text_fixture_list: false,\r\n    team_fixture_list: undefined,\r\n    loading_squad_for_manager_id: false,\r\n    squad_for_manager_id_data: [],\r\n    loading_manager_curr_season: false,\r\n    manager_curr_season_data: [],\r\n    loading_player_season_stats: false,\r\n    player_season_stats_data: undefined,\r\n    loading_player_gw_stats: false,\r\n    player_gw_stats_data: undefined,\r\n    loading_league_info: false,\r\n    league_info_data: undefined,\r\n    loading_league_points_for_gw: false,\r\n    league_points_for_gw_data: undefined,\r\n    loading_live_data: false,\r\n    live_data: undefined,\r\n    loading_squads_for_league_id: false,\r\n    squads_for_league_id_data: undefined,\r\n    loading_curr_gw: false,\r\n    curr_gw: undefined,\r\n    show_players_form: false,\r\n}\r\n\r\nexport const rootReducer = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.LOADING_PLAYERS:\r\n            return { ...state, loading_players: true};\r\n\r\n        case ActionTypes.ADD_PLAYERS:\r\n            return { ...state, loading_players: false, players_data: action.payload};\r\n            \r\n        case ActionTypes.LOADING_FIXTURE_DIFFICULTY:\r\n            return { ...state, loading_fixture_difficulty: true};\r\n\r\n        case ActionTypes.ADD_FIXTURE_DIFFICULTY:\r\n            return { ...state, loading_fixture_difficulty: false, fixture_difficulty_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_FIXTURE_LIST:\r\n            return { ...state, loading_fixture_list: true};\r\n\r\n        case ActionTypes.ADD_FIXTURE_LIST:\r\n                return { ...state, loading_fixture_list: false, fixture_list_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_TEAM_IDS:\r\n            return { ...state, loading_team_ids: true};\r\n\r\n        case ActionTypes.ADD_TEAM_IDS:\r\n            return { ...state, loading_team_ids: false, team_ids_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_TEAMS_STATS:\r\n            return { ...state, loading_teams_stats: true};\r\n\r\n        case ActionTypes.ADD_TEAMS_STATS:\r\n            return { ...state, loading_teams_stats: false, teams_stats: action.payload};\r\n\r\n        case ActionTypes.LOADING_TEAM_FIXTURE_LIST:\r\n            return { ...state, loading_team_fixture_list: true};\r\n\r\n        case ActionTypes.ADD_TEAM_FIXTURE_LIST:\r\n            return { ...state, loading_team_fixture_list: false, team_fixture_list: action.payload};\r\n\r\n        case ActionTypes.LOADING_SQUAD_FOR_MANAGER_ID:\r\n            return { ...state, loading_squad_for_manager_id: true};\r\n\r\n        case ActionTypes.ADD_SQUAD_FOR_MANAGER_ID:\r\n            return { ...state, loading_squad_for_manager_id: false, squad_for_manager_id_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_MANAGER_CURR_SEASON:\r\n            return { ...state, loading_manager_curr_season: true};\r\n\r\n        case ActionTypes.ADD_MANAGER_CURR_SEASON:\r\n            return { ...state, loading_manager_curr_season: false, manager_curr_season_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_PLAYER_SEASON_STATS:\r\n            return { ...state, loading_player_season_stats: true};\r\n        \r\n        case ActionTypes.ADD_PLAYER_SEASON_STATS:\r\n            return { ...state, loading_player_season_stats: false, player_season_stats_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_PLAYER_GW_STATS:\r\n            return { ...state, loading_player_gw_stats: true};\r\n\r\n        case ActionTypes.ADD_PLAYER_GW_STATS:\r\n            return { ...state, loading_player_gw_stats: false, player_gw_stats_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_LEAGUE_INFO:\r\n            return { ...state, loading_league_info: true};\r\n\r\n        case ActionTypes.ADD_LEAGUE_INFO:\r\n            return { ...state, loading_league_info: false, league_info_data: action.payload};\r\n            \r\n        case ActionTypes.LOADING_LEAGUE_POINTS_FOR_GW:\r\n            return { ...state, loading_league_points_for_gw: true};\r\n\r\n        case ActionTypes.ADD_LEAGUE_POINTS_FOR_GW:\r\n            return { ...state, loading_league_points_for_gw: false, league_points_for_gw_data: action.payload};\r\n            \r\n        case ActionTypes.LOADING_LIVE_DATA:\r\n            return { ...state, loading_live_data: true};\r\n\r\n        case ActionTypes.ADD_LIVE_DATA:\r\n            return { ...state, loading_live_data: false, live_data: action.payload};\r\n\r\n        case ActionTypes.LOADING_SQUADS_FOR_LEAGUE_ID:\r\n            return { ...state, loading_squads_for_league_id: true}; \r\n\r\n        case ActionTypes.ADD_SQUADS_FOR_LEAGUE_ID:\r\n            return { ...state, loading_squads_for_league_id: false, squads_for_league_id_data: action.payload}; \r\n            \r\n        case ActionTypes.LOADING_CURR_GW:\r\n            return { ...state, loading_curr_gw: true}; \r\n\r\n        case ActionTypes.ADD_CURR_GW:\r\n            return { ...state, loading_curr_gw: false, curr_gw: action.payload};  \r\n            \r\n        case ActionTypes.TOGGLE_SHOW_PLAYERS_FORM:\r\n            return { ...state, show_players_form: !state.show_players_form};  \r\n\r\n        case ActionTypes.SET_SHOW_PLAYERS_FORM_VAL:\r\n            return { ...state, show_players_form: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","\r\nexport const API_BASE_URL = 'http://localhost:5000/api';\r\n//export const API_BASE_URL = 'https://fantasy-football-app-r383r.ondigitalocean.app/api';\r\n\r\nexport const LEAGUE_ID = '1230538';     // '1437093';","import * as ActionTypes from './actionTypes';\r\nimport { API_BASE_URL } from '../environment/environment'\r\n\r\nexport const fetchPlayers = (num_players=9999) => {\r\n    return async dispatch => {\r\n        dispatch({  type: ActionTypes.LOADING_PLAYERS });\r\n        const url = `${API_BASE_URL}/players/num_players=${num_players}`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_PLAYERS, payload: data });\r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const fetch_fixture_difficulty = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_FIXTURE_DIFFICULTY });\r\n        const url = `${API_BASE_URL}/fixture_difficulty/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_FIXTURE_DIFFICULTY, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const fetch_fixture_list = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_FIXTURE_LIST });\r\n        const url = `${API_BASE_URL}/fixture_list/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_FIXTURE_LIST, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const fetch_team_ids = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_TEAM_IDS });\r\n        const url = `${API_BASE_URL}/team_ids/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_TEAM_IDS, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const fetch_teams_stats = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_TEAMS_STATS });\r\n        const url = `${API_BASE_URL}/teams_stats/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_TEAMS_STATS, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetch_team_fixture_list = (team_name) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_TEAM_FIXTURE_LIST });\r\n        const url = `${API_BASE_URL}/team_fixture_lists/${team_name}`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_TEAM_FIXTURE_LIST, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetch_squad_for_manager_id = (manager_id, curr_gw) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_SQUAD_FOR_MANAGER_ID });\r\n        const url = `${API_BASE_URL}/squad_for_manager_id/${manager_id}/${curr_gw}/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_SQUAD_FOR_MANAGER_ID, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_manager_curr_season = (manager_id) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_MANAGER_CURR_SEASON });\r\n        const url = `${API_BASE_URL}/manager_curr_season/${manager_id}/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_MANAGER_CURR_SEASON, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_player_season_stats = (web_name_id) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_PLAYER_SEASON_STATS });\r\n        const url = `${API_BASE_URL}/player_season_stats/${web_name_id}/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_PLAYER_SEASON_STATS, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_player_gw_stats = (web_name_id) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_PLAYER_GW_STATS });\r\n        const url = `${API_BASE_URL}/player_gw_stats/${web_name_id}/`;\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_PLAYER_GW_STATS, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_league_info = (league_id) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_LEAGUE_INFO });  \r\n        const url = `${API_BASE_URL}/leagues/${league_id}/`;  \r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_LEAGUE_INFO, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_league_points_for_gw = (league_id, curr_gw) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_LEAGUE_POINTS_FOR_GW });  \r\n        const url = `${API_BASE_URL}/league_points_for_gw/${league_id}/${parseInt(curr_gw)}/`; \r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_LEAGUE_POINTS_FOR_GW, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_live_data = curr_gw => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_LIVE_DATA });  \r\n        const url = `${API_BASE_URL}/live_data/${curr_gw}/`; \r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_LIVE_DATA, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_squads_for_league_id = (league_id, curr_gw) => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_SQUADS_FOR_LEAGUE_ID });  \r\n        const url = `${API_BASE_URL}/squads_for_league_id/${league_id}/${curr_gw}`; \r\n        console.log('fetch_squads_for_league_id > url', url)\r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_SQUADS_FOR_LEAGUE_ID, payload: data })            \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err)\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nexport const fetch_curr_gw = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: ActionTypes.LOADING_CURR_GW });  \r\n        const url = `${API_BASE_URL}/current_gw`; \r\n        try {\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            dispatch({ type: ActionTypes.ADD_CURR_GW, payload: data.curr_gw });           \r\n        }\r\n        catch(err) {\r\n            console.log('Error:', err);\r\n        }\r\n    } \r\n}\r\n\r\n\r\nexport const toggle_show_players_form = () =>  {\r\n    return { type: ActionTypes.TOGGLE_SHOW_PLAYERS_FORM };\r\n}\r\n\r\n\r\nexport const set_show_players_form_val = (val) => {\r\n    return { type: ActionTypes.SET_SHOW_PLAYERS_FORM_VAL, payload: val};\r\n}\r\n\r\n","import React from 'react';\r\nimport { Link, NavLink, withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggle_show_players_form } from '../redux/actionCreators';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport './Navbar.css';\r\nimport { LEAGUE_ID } from '../environment/environment'\r\n\r\nconst SHOW_HAMBURGER_BARS_MAX_WIDTH = 575;\r\n\r\nconst Navbar = (props) => {\r\n    const show_players_form = useSelector(state => state.show_players_form);\r\n    const dispatch = useDispatch();\r\n\r\n    let page_name = 'Players';\r\n    let show_hamburger_bars = false;\r\n    const path = props.location.pathname;\r\n    if (path.match(/^\\/players(\\/)?$/)) {\r\n        page_name = 'Players';\r\n        show_hamburger_bars = window.innerWidth < SHOW_HAMBURGER_BARS_MAX_WIDTH ? true : false;\r\n    }\r\n    else if (path.includes('leagues')) {\r\n        page_name = 'Leagues';\r\n    }\r\n    else if (path.includes('teams')) {\r\n        page_name = 'Teams';\r\n    }\r\n    else if (path.includes('fixtures')) {\r\n        page_name = 'Fixtures';\r\n    }\r\n    else if (path.includes('glossary')) {\r\n        page_name = 'Glossary';\r\n    }\r\n\r\n    const handleToggleShowPlayersForm = () => {\r\n        const playersFormDivElement = document.querySelector('.players-form-container'); \r\n        if (show_players_form && playersFormDivElement) {\r\n            playersFormDivElement.classList.remove('animation-slide-in');\r\n            playersFormDivElement.classList.add('animation-slide-out');\r\n        }\r\n        else {\r\n            playersFormDivElement.classList.remove('animation-slide-out');\r\n            playersFormDivElement.classList.add('animation-slide-in');\r\n        }\r\n        dispatch(toggle_show_players_form());\r\n    };\r\n\r\n    return (\r\n        <nav className=\"nav-container\">\r\n            <Link to=\"/\" className=\"logo\">MERN Stack Fantasy Football App</Link>\r\n            <ul className=\"nav-ul\">\r\n                <li className={`nav-li ${page_name === 'Players' ? ' active-tab': ''}`}>\r\n                    <NavLink to=\"/players\" activeClassName=\"active-class\">Players</NavLink>\r\n                </li>\r\n                <li className={`nav-li ${page_name === 'Leagues' ? ' active-tab': ''}`}>\r\n                    <NavLink to={`/leagues/${LEAGUE_ID}`}  activeClassName=\"active-class\">Leagues</NavLink>\r\n                </li>\r\n                <li className={`nav-li ${page_name === 'Teams' ? ' active-tab': ''}`}>\r\n                    <NavLink to=\"/teams\" activeClassName=\"active-class\">PL</NavLink>\r\n                </li>\r\n                <li className={`nav-li ${page_name === 'Fixtures' ? ' active-tab': ''}`}>\r\n                    <NavLink to=\"/fixtures\" activeClassName=\"active-class\">Fixtures</NavLink>\r\n                </li>\r\n            </ul>\r\n            <FontAwesomeIcon \r\n                className=\"menu-hamburger\" \r\n                icon={faBars} \r\n                onClick={handleToggleShowPlayersForm} \r\n                style={{display: show_hamburger_bars ? 'inline' : 'none'}}    \r\n            />\r\n            <Link to='/glossary'>\r\n                <FontAwesomeIcon className=\"help-button\" icon={faInfoCircle} />\r\n            </Link>\r\n        </nav>\r\n    );\r\n  }\r\n   \r\n  export default withRouter(Navbar);","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n\r\n    return (\r\n        <footer className=\"page-footer\">\r\n            <div>© 2021 MERN Stack Fantasy Football App</div>\r\n        </footer>\r\n    );\r\n  }\r\n   \r\n  export default Footer;","import React, { Component } from 'react';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { set_show_players_form_val } from '../redux/actionCreators';\r\nimport './PlayersForm.css';\r\n\r\nconst NUM_TOP_PLAYERS_OPTIONS = ['25', '50', '100', '200', 'All'];\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        show_players_form: state.show_players_form,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        set_show_players_form_val: (val) => dispatch(set_show_players_form_val(val))\r\n    };\r\n}\r\n\r\nclass PlayersForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedTeam: props.selectedTeam,\r\n            selectedPosition: props.selectedTeam,\r\n            topPlayersCheckboxChecked: true,\r\n            numTopPlayers: props.initialNumTopPlayers,\r\n            sortByKey: props.sortByKey\r\n        }\r\n\r\n        this.handleClickTeam = this.handleClickTeam.bind(this);\r\n        this.handleClickPosition = this.handleClickPosition.bind(this);\r\n        this.handleTopPlayersSelectChange = this.handleTopPlayersSelectChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            selectedTeam: this.props.selectedTeam,\r\n            selectedPosition: this.props.selectedTeam,\r\n        });      \r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.selectedTeam !== this.props.selectedTeam\r\n        || prevProps.selectedPosition !== this.props.selectedPosition\r\n        || prevProps.sortByKey !== this.props.sortByKey) {\r\n            this.setState({ \r\n                selectedTeam: this.props.selectedTeam,\r\n                selectedPosition: this.props.selectedPosition,\r\n                sortByKey: this.props.sortByKey\r\n            });      \r\n        }\r\n    }\r\n\r\n    handleClickTeam(e) {\r\n        this.dismissPlayersForm();\r\n        this.setState({\r\n            selectedTeam: e.target.innerText\r\n        });\r\n    }\r\n\r\n\r\n    handleClickPosition(e) {\r\n        this.dismissPlayersForm();\r\n        this.setState({\r\n            selectedPosition: e.target.innerText\r\n        });\r\n    }\r\n\r\n    handleTopPlayersSelectChange(e) {\r\n        this.setState({\r\n            numTopPlayers: e.target.value\r\n        }, () => {\r\n            this.dismissPlayersForm();\r\n            const url = this.create_query_string(null, null);\r\n            this.props.history.push(`/players?${url}`);\r\n        });\r\n    }\r\n\r\n    dismissPlayersForm() {\r\n        const playersFormDivElement = this.props.playersFormRef.current;\r\n        if (this.props.show_players_form) {\r\n            playersFormDivElement.classList = \r\n                        `${playersFormDivElement.classList.value.replace('animation-slide-in', '')} animation-slide-out`; \r\n        }\r\n        this.props.set_show_players_form_val(false);\r\n    }\r\n\r\n    create_query_string(key, value) {\r\n        const position = `position=${ key === 'position' ? value : this.state.selectedPosition}`;\r\n        const team = `team=${ key === 'team' ? value.replace(' ', '_') : this.state.selectedTeam.replace(' ', '_')}`;\r\n        const num_top_rank = `num_top_rank=${ this.state.topPlayersCheckboxChecked ? this.state.numTopPlayers : -1}`;\r\n        const sort_by_key = `sortByKey=${this.state.sortByKey}`;\r\n        return `&${position}&${team}&${num_top_rank}&${sort_by_key}`;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    get_positions_JSX() {\r\n        const JSX = ['All', 'GK', 'DEF', 'MID', 'FWD'].map(position => {\r\n            const bgColor = position === this.state.selectedPosition ? 'crimson' : 'DarkSlateBlue';\r\n            return <li \r\n                    className=\"positions-li\" \r\n                    key={position}\r\n                    name={position}\r\n                    onClick={this.handleClickPosition}\r\n                    style={{backgroundColor: bgColor}}\r\n                    >\r\n                        <NavLink to={`/players?${this.create_query_string('position', position)}`}>{ position }</NavLink>\r\n                    </li>;\r\n        });\r\n        return <ul className=\"positions-ul\">{ JSX }</ul>\r\n    }\r\n\r\n    get_teams_JSX() {\r\n        const teams_list = ['All', ...this.props.teams];\r\n        const JSX = teams_list.map(team => {\r\n            const bgColor = team === this.state.selectedTeam ? 'crimson' : 'DarkSlateBlue';\r\n            return <li \r\n                    className=\"teams-li\" \r\n                    key={team}\r\n                    name={team}\r\n                    onClick={this.handleClickTeam}\r\n                    style={{backgroundColor: bgColor}}\r\n                    >\r\n                        <NavLink to={`/players?${this.create_query_string('team', team)}`}>{ team }</NavLink>\r\n                    </li>;\r\n        });\r\n        return <ul className=\"teams-ul\">{ JSX }</ul>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"players-form\">\r\n                <label htmlFor=\"select-position\">Position</label>\r\n                <div className=\"positions-list-container\">\r\n                    { this.get_positions_JSX() }\r\n                </div>\r\n\r\n                <label htmlFor=\"select-teams\">Team</label>\r\n                <div className=\"teams-list-container\">\r\n                    { this.get_teams_JSX() }\r\n                </div>\r\n\r\n                <div className=\"num-top-players-table\">\r\n                        <div className=\"textbox-top-players-row\">\r\n                            <span className=\"num-top-players-1st-col\"> \r\n                                <label className=\"label-num-top-players\" htmlFor=\"textbox-num-top-players\">Top ranked:</label>\r\n                            </span>\r\n                            <span className=\"num-top-players-2nd-col\">\r\n                                <select className=\"num-top-players-select\" name=\"num-top-players-select\"\r\n                                        onChange={this.handleTopPlayersSelectChange}\r\n                                        disabled={!this.state.topPlayersCheckboxChecked}\r\n                                        defaultValue=\"50\"\r\n                                >\r\n                                    { \r\n                                        NUM_TOP_PLAYERS_OPTIONS.map(num => {\r\n                                            switch(num) {\r\n                                                case '50':\r\n                                                    return <option key={num} value={num}>{num}</option>;\r\n                                                case 'All':\r\n                                                    return <option key={num} value={'9999'}>{num}</option>;\r\n                                                default:\r\n                                                    return <option key={num} value={num}>{num}</option>;\r\n                                            }\r\n                                        }) \r\n                                    }\r\n                                </select>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PlayersForm));\r\n\r\n\r\n\r\n\r\n","\r\nexport function query_string_to_query_dict(query_string) {\r\n    const query_array = query_string.slice(1).split('&');\r\n    const query_dict = {};\r\n    query_array.forEach(v => {\r\n        const a = v.split('=')\r\n        if(a[0]) {\r\n            query_dict[a[0]] = a[1];\r\n        }\r\n    });\r\n    return query_dict;\r\n}\r\n\r\n\r\nexport function sort_LOD_by_key(LOD, sort_key, ascending=true) {\r\n    const temp_list = [...LOD];\r\n    if(ascending) {\r\n        temp_list.sort((a, b) => {\r\n            if (a[sort_key] < b[sort_key]) return -1;\r\n            if (a[sort_key] > b[sort_key]) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n    else {\r\n        temp_list.sort((a, b) => {\r\n            if (a[sort_key] > b[sort_key]) return -1;\r\n            if (a[sort_key] < b[sort_key]) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n    return temp_list;\r\n}\r\n\r\n\r\nexport function debounce(fn, ms) {\r\n    let timer; \r\n    return () => { \r\n        clearTimeout(timer); \r\n        timer = setTimeout(() => { \r\n            timer = null;  \r\n            fn.apply(this, arguments);  \r\n        }, ms); \r\n    }; \r\n}\r\n\r\n\r\nexport function create_lookup_dict(arr, key_field) {\r\n    const d = {};\r\n    arr.forEach(v => d[v[key_field]] = v);\r\n    return d;\r\n}\r\n\r\n\r\nexport function ema(x, Nma) {\r\n    const y = new Array(x.length).fill(0);\r\n    const alpha = 2 / (Nma + 1);\r\n    y[0] = x[0];\r\n    for (let i=1; i<x.length; i++) {\r\n        y[i] = alpha * x[i] + (1 - alpha) * y[i-1];\r\n    }\r\n    return y;\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PlayersForm from './PlayersForm';\r\nimport { query_string_to_query_dict, sort_LOD_by_key, debounce } from '../misc_functions';\r\nimport './Players.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchPlayers, set_show_players_form_val } from '../redux/actionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        players_data: state.players_data,\r\n        teams: state.team_ids_data,\r\n        show_players_form: state.show_players_form,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchPlayers: (num_players) => dispatch(fetchPlayers(num_players)),\r\n        set_show_players_form_val: (val) => dispatch(set_show_players_form_val(val))\r\n    };\r\n}\r\n\r\n\r\nconst INITIAL_NUM_TOP_PLAYERS = 50;\r\nconst RERENDER_DELAY_MS = 50;\r\n//const MOBILE_MAX_WIDTH = 575;\r\n\r\nconst keys_list = [\r\n    { displayName: 'rank',          arrayKey: 'rank',           type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'player',        arrayKey: 'web_name',       type: 'string', sortDirection: 'asc'}, \r\n    { displayName: 'team',          arrayKey: 'team_name',      type: 'string', sortDirection: 'asc'}, \r\n    { displayName: 'pos',           arrayKey: 'position',       type: 'string', sortDirection: 'asc'}, \r\n    { displayName: 'price',         arrayKey: 'price',          type: 'float',  sortDirection: 'desc'}, \r\n    { displayName: 'points',        arrayKey: 'total_points',   type: 'int',    sortDirection: 'desc'}, \r\n    { displayName: 'G',             arrayKey: 'goals_scored',   type: 'int',    sortDirection: 'desc'}, \r\n    { displayName: 'A',             arrayKey: 'assists',        type: 'int',    sortDirection: 'desc'}, \r\n    { displayName: 'CS',            arrayKey: 'clean_sheets',   type: 'int',    sortDirection: 'desc'}, \r\n    { displayName: 'GC',            arrayKey: 'goals_conceded', type: 'int',    sortDirection: 'desc'}, \r\n    { displayName: 'bonus',         arrayKey: 'bonus',          type: 'int',    sortDirection: 'desc'}, \r\n    { displayName: 'form pts',      arrayKey: 'form_pts',       type: 'string', sortDirection: 'desc'}, \r\n    { displayName: 'ma(Pts,L)',     arrayKey: 'pts_ma_L',       type: 'float',  sortDirection: 'desc'}, \r\n    { displayName: 'ma(Pts,S)',     arrayKey: 'pts_ma_S',       type: 'float',  sortDirection: 'desc'},\r\n    { displayName: 'difficulty',    arrayKey: 'difficulty',     type: 'string', sortDirection: 'desc'}, \r\n    { displayName: 'form mins',     arrayKey: 'form_mins',      type: 'string', sortDirection: 'desc'},\r\n    { displayName: 'mins',          arrayKey: 'minutes',        type: 'int',    sortDirection: 'desc'},  \r\n];\r\n\r\nconst excluded_columns = [\r\n    {\r\n        max_width: 350,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S', 'minutes', 'bonus', 'goals_conceded', 'clean_sheets', 'pts_ma_L']\r\n    },\r\n    {\r\n        max_width: 370,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S', 'minutes', 'bonus', 'goals_conceded', 'clean_sheets']\r\n    },\r\n    {\r\n        max_width: 395,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S', 'minutes', 'bonus', 'goals_conceded']\r\n    }, \r\n    {\r\n        max_width: 440,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S', 'minutes', 'bonus']\r\n    }, \r\n    {\r\n        max_width: 470,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S', 'minutes']\r\n    }, \r\n    {\r\n        max_width: 575,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S']\r\n    },   \r\n    {\r\n        max_width: 650,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S', 'minutes']\r\n    }, \r\n    {\r\n        max_width: 710,\r\n        cols: ['form_pts', 'form_mins', 'difficulty', 'pts_ma_S']\r\n    },  \r\n    {\r\n        max_width: 810,\r\n        cols: ['form_pts', 'form_mins', 'difficulty']\r\n    },  \r\n    {\r\n        max_width: 1250,\r\n        cols: ['form_pts', 'form_mins']\r\n    },    \r\n    {\r\n        max_width: 99999,\r\n        cols: []\r\n    },\r\n];\r\n\r\nfunction get_filtered_keys_list(cols_list, excluded_cols) {\r\n    const window_width = window.innerWidth;\r\n    const excluded_cols_item = excluded_cols.find(x => x.max_width > window_width);\r\n    const excluded_cols_list = excluded_cols_item.cols;\r\n    const filtered_keys_list = cols_list.filter(x => !excluded_cols_list.includes(x.arrayKey));\r\n    return filtered_keys_list\r\n}\r\n\r\nclass Players extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            players: [],\r\n            filteredPlayers: [],\r\n            teams: [],\r\n            sortByKey: 'total_points',\r\n            selectedTeam: 'All',\r\n            selectedPosition: 'All',\r\n            topPlayersCheckboxChecked: true,\r\n            numTopPlayers: INITIAL_NUM_TOP_PLAYERS,\r\n            filtered_keys_list: undefined,\r\n            window_width: undefined,\r\n        };\r\n        this.handleHeadingClick = this.handleHeadingClick.bind(this);\r\n        this.getDefaultSortDirection = this.getDefaultSortDirection.bind(this);\r\n        this.filter_and_sort_players_table = this.filter_and_sort_players_table.bind(this);\r\n        this.handleQueryParams = this.handleQueryParams.bind(this);\r\n        this.playersFormContainer_ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `Fantasy Football Stats | Players Statistics`;\r\n        this._ismounted = true;\r\n        this.handleQueryParams();\r\n        this.props.fetchPlayers(25);\r\n        this.props.fetchPlayers();\r\n        const filtered_keys_list = get_filtered_keys_list(keys_list, excluded_columns);\r\n        window.addEventListener('resize', debounce(this.handleResize, RERENDER_DELAY_MS));\r\n\r\n        if (this.props.teams) {\r\n            const team_names = this.props.teams.map(x => x.name);\r\n            const short_team_name_lookup = {};\r\n            this.props.teams.forEach(team_dict => short_team_name_lookup[team_dict.name] = team_dict.short_name);\r\n            this.setState({\r\n                teams: team_names,\r\n                short_team_name_lookup: short_team_name_lookup,\r\n                filtered_keys_list\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.location.search !== this.props.location.search) {\r\n            this.handleQueryParams();\r\n        }\r\n\r\n        if (prevProps.players_data !== this.props.players_data) {\r\n            this.processPlayersData(this.props.players_data);\r\n        }\r\n\r\n        if (this.props.teams && prevProps.teams !== this.props.teams) {\r\n            const team_names = this.props.teams.map(x => x.name);\r\n            const short_team_name_lookup = {};\r\n            this.props.teams.forEach(team_dict => short_team_name_lookup[team_dict.name] = team_dict.short_name);\r\n            this.setState({\r\n                teams: team_names,\r\n                short_team_name_lookup: short_team_name_lookup\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', debounce(this.handleResize, RERENDER_DELAY_MS));\r\n        this._ismounted = false;\r\n    }\r\n\r\n    handleResize = () => {\r\n        if (!this._ismounted) \r\n            return;\r\n        const filtered_keys_list = get_filtered_keys_list(keys_list, excluded_columns);\r\n        this.setState({\r\n            window_width: window.innerWidth,\r\n            filtered_keys_list          \r\n        });\r\n        this.props.set_show_players_form_val(false);\r\n    }\r\n\r\n    processPlayersData(data) {\r\n        const convertedData = data.map(x => {\r\n            let a = {...x};\r\n            for(let i=0; i<keys_list.length; i++) {\r\n                const key = keys_list[i].arrayKey;\r\n                if(keys_list[i].type === 'int') {\r\n                    a[key] = parseInt(x[key]);\r\n                }\r\n                else if (keys_list[i].type === 'float') {\r\n                    a[key] = parseFloat(x[key]);\r\n                }  \r\n                \r\n                if(key.includes('ppm')) {\r\n                    a[key] = parseFloat(x[key]).toFixed(4);\r\n                }                     \r\n            }\r\n            return a;\r\n        })\r\n        this.setState({\r\n            players: convertedData,\r\n            filteredPlayers: convertedData\r\n        }, () => {\r\n            this.filter_and_sort_players_table();\r\n        })\r\n    }\r\n\r\n    handleQueryParams() {\r\n        const query_dict = query_string_to_query_dict(this.props.location.search)\r\n\r\n        const state_update_obj = {}\r\n        state_update_obj.sortByKey = 'sortByKey' in query_dict ? query_dict.sortByKey : 'total_points';\r\n        state_update_obj.selectedTeam = 'team' in query_dict ? query_dict.team.replace('_', ' ') : 'All';\r\n        state_update_obj.selectedPosition = 'position' in query_dict ? query_dict.position : 'All';\r\n        state_update_obj.topPlayersCheckboxChecked = 'num_top_rank' in query_dict && query_dict.num_top_rank < 0 ? false : true;\r\n        state_update_obj.numTopPlayers = 'num_top_rank' in query_dict ? query_dict.num_top_rank : INITIAL_NUM_TOP_PLAYERS;\r\n\r\n        this.setState({\r\n            sortByKey: state_update_obj.sortByKey,\r\n            selectedTeam: state_update_obj.selectedTeam,\r\n            selectedPosition: state_update_obj.selectedPosition,\r\n            topPlayersCheckboxChecked: state_update_obj.topPlayersCheckboxChecked,\r\n            numTopPlayers: state_update_obj.numTopPlayers\r\n        }, () => {\r\n            this.filter_and_sort_players_table();\r\n        });\r\n    }\r\n\r\n    create_query_string(newSortByKey) {\r\n        const position = this.state.selectedPosition;\r\n        const team = this.state.selectedTeam.replace(' ', '_');\r\n        const num_top_rank = this.state.topPlayersCheckboxChecked ? this.state.numTopPlayers : -1;\r\n        return `&position=${position}&team=${team}&num_top_rank=${num_top_rank}&sortByKey=${newSortByKey}`;\r\n    }\r\n\r\n    handleHeadingClick(e) {\r\n        e.preventDefault();\r\n        const sortByKey = e.target.dataset.arraykey;   \r\n        const newUrl = `/players?${this.create_query_string(sortByKey)}`;\r\n        window.history.replaceState(null, '', newUrl);\r\n        this.setState({\r\n            sortByKey: sortByKey\r\n        }, () => {\r\n            this.filter_and_sort_players_table();\r\n        });\r\n    }\r\n\r\n    getDefaultSortDirection(sortByKey) {\r\n        const info = keys_list.find(x => x.arrayKey === sortByKey);\r\n        return info.sortDirection;\r\n    }\r\n\r\n    filter_and_sort_players_table() {\r\n        if (!['players', 'sortByKey'].every(key => this.state[key])) {\r\n            return;\r\n        }\r\n        let tempPlayers = [...this.state.players];\r\n        if(this.state.selectedTeam !== 'All') {        \r\n            tempPlayers = tempPlayers.filter(obj => obj.team_name === this.state.selectedTeam);           \r\n        }\r\n        if(this.state.selectedPosition !== 'All') {\r\n            tempPlayers = tempPlayers.filter(obj => obj.position === this.state.selectedPosition);          \r\n        }\r\n        const arrayKey = this.state.sortByKey;\r\n        const sort_direction = this.getDefaultSortDirection(arrayKey) === 'asc' ? true : false;\r\n        tempPlayers = sort_LOD_by_key(tempPlayers, arrayKey, sort_direction);\r\n        this.setState({\r\n            filteredPlayers: [...tempPlayers],\r\n        }, () => this.forceUpdate());\r\n    }\r\n\r\n    handleAnimationEnd = (e) => {\r\n        e.target.classList.remove('animation-slide-out');\r\n    }\r\n\r\n    handleClosePlayersFormClick = (e) => {\r\n        const playersFormDivElement = this.playersFormContainer_ref.current; \r\n        if (playersFormDivElement.classList.value.includes('animation-slide-in')) {\r\n            playersFormDivElement.classList.remove('animation-slide-in');\r\n            playersFormDivElement.classList.add('animation-slide-out');\r\n            this.props.set_show_players_form_val(false); \r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getPlayersTableHeadingsRow() {\r\n        if (!this.state.filtered_keys_list)\r\n            return null;\r\n        const row = this.state.filtered_keys_list.map(x => {\r\n            return(\r\n                <th \r\n                    key={x.displayName} \r\n                    className={this.state.sortByKey === x.arrayKey ? 'sortByKey' : 'normalHeadingCell'} \r\n                    data-arraykey={x.arrayKey}\r\n                    onClick={this.handleHeadingClick}\r\n                    >{ x.displayName }\r\n                </th>\r\n            );\r\n        });\r\n        return row;\r\n    }\r\n\r\n    getPlayersTableRow(data, idx) {\r\n        if (!this.state.filtered_keys_list)\r\n            return null;\r\n        const row = this.state.filtered_keys_list.map(x => {\r\n            let val;\r\n            if (x.arrayKey === 'rank') {\r\n                val = idx;\r\n            }\r\n            else {\r\n                val = data[x.arrayKey];\r\n            }\r\n            if (x.arrayKey === 'web_name') {\r\n                val = <Link to={`/players/${data.web_name_id.replace(' ', '_')}`}>{data.web_name}</Link>;\r\n                return <td key={x.arrayKey} className=\"bold-td\">{ val }</td>;\r\n            }\r\n            else if (x.arrayKey === 'team_name') {\r\n                val = <Link to={`/teams/${data.team_name.replace(' ', '_')}`}>{this.state.short_team_name_lookup[data.team_name]}</Link>;\r\n                return <td key={x.arrayKey} className=\"bold-td short-team-name\">{ val }</td>;\r\n            }\r\n            else {\r\n                return <td key={x.arrayKey}>{ val }</td>;\r\n            }\r\n        });\r\n        return row;\r\n    }\r\n\r\n    createPlayersTableRows() {\r\n        let Nplayers = this.state.topPlayersCheckboxChecked ? this.state.numTopPlayers : this.state.players.length;\r\n        const rows = this.state.filteredPlayers.slice(0, Nplayers).map((data, i) => {\r\n            return(\r\n                <tr key={i}>\r\n                    { this.getPlayersTableRow(data, i+1) }\r\n                </tr>\r\n            );\r\n        });\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"players-page-container\" onClick={this.handleClosePlayersFormClick}>\r\n                <div \r\n                    className=\"players-form-container\"\r\n                    onAnimationEnd={this.handleAnimationEnd}\r\n                    ref={this.playersFormContainer_ref}\r\n                    >\r\n                    <PlayersForm \r\n                        teams={this.state.teams} \r\n                        selectedTeam={this.state.selectedTeam}\r\n                        selectedPosition={this.state.selectedPosition}\r\n                        updateFormState={this.updateFormState}\r\n                        initialNumTopPlayers={INITIAL_NUM_TOP_PLAYERS}\r\n                        sortByKey={this.state.sortByKey}\r\n                        playersFormRef={this.playersFormContainer_ref}\r\n                        />\r\n                </div> \r\n                <div className=\"players-table-container\">\r\n                    <table className=\"styled-table\">\r\n                        <thead><tr>{ this.getPlayersTableHeadingsRow() }</tr></thead>\r\n                        <tbody>\r\n                            { this.state.short_team_name_lookup && this.createPlayersTableRows() }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Players);\r\n\r\n\r\n","import React from 'react';\r\nimport './PlayerStatsTable.css';\r\n\r\n\r\nfunction get_filtered_cols_list(cols_list) {\r\n    const excluded_columns = [\r\n        { max_width: 430, cols: ['penalties_missed', 'penalties_saved', 'pts/90min', 'red_cards', 'saves', 'own_goals'] },\r\n        { max_width: 575, cols: ['penalties_missed', 'penalties_saved', 'pts/90min'] },\r\n        { max_width: 650, cols: ['penalties_missed', 'penalties_saved'] },\r\n        { max_width: 800, cols: ['penalties_missed'] },\r\n        { max_width: 99999, cols: [] },\r\n    ]\r\n    const excluded_cols_item = excluded_columns.find(x => x.max_width > window.innerWidth);\r\n    const excluded_cols = excluded_cols_item.cols;\r\n    const filtered_keys_list = cols_list.filter(x => !excluded_cols.includes(x.key));\r\n    return filtered_keys_list;\r\n}\r\n\r\nconst PlayerStatsTable = (props) => {\r\n    if(!props.stats_values) {\r\n        return null;\r\n    }\r\n\r\n    const {stats_values, pts_contrib, pts_contrib_pct, season_stats_info_keys} = props;\r\n    const filtered_stats_info_keys = get_filtered_cols_list(season_stats_info_keys);\r\n    const headings_row_cells = filtered_stats_info_keys.map(item => <th key={item.heading_text}>{item.heading_text}</th>);\r\n    const values_row_cells = filtered_stats_info_keys.map(item => <td key={item.key}>{stats_values[item.key]}</td>);\r\n    const pts_contrib_row_cells = filtered_stats_info_keys.map(item => <td key={item.key}>{pts_contrib[item.key]}</td>);\r\n    const pts_contrib_pct_row_cells = filtered_stats_info_keys.map(item => <td key={item.key}>{pts_contrib_pct[item.key]}</td>);\r\n\r\n    return (\r\n        <table className=\"player-stats-table styled-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>&nbsp;</th>\r\n                    {headings_row_cells}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stats</td>\r\n                    {values_row_cells}\r\n                </tr>\r\n                <tr>\r\n                    <td>Points</td>\r\n                    {pts_contrib_row_cells}\r\n                </tr>\r\n                <tr>\r\n                    <td>%</td>\r\n                    {pts_contrib_pct_row_cells}\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default PlayerStatsTable;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { ema } from '../misc_functions';\r\n\r\n\r\nconst LineChartPointsMA = (props) => {\r\n    const [chart_data, set_chart_data] = useState();\r\n\r\n    useEffect(() => {\r\n        if(props)\r\n            load_gw_data(props);\r\n    }, [props]);  \r\n\r\n    function load_gw_data(props) {\r\n        const { gw_data, Nma, var_name } = props;\r\n        if (!gw_data || !Nma || !var_name) {\r\n            return null;\r\n        }\r\n        const labels = gw_data.map(gw => gw.round);\r\n        const data_total_pts = gw_data.map(gw => gw.total_points);\r\n        let data_pts_ma = ema(data_total_pts, Nma);\r\n        data_pts_ma = data_pts_ma.map(x => parseFloat(x.toFixed(2)));\r\n\r\n        const tempObj = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: props.var_name,\r\n                    data: data_pts_ma,\r\n                    borderColor: '#8c83c9',\r\n                    fill: false,\r\n                    borderWidth: 2,\r\n                    pointStyle: 'rect',\r\n                    pointBackgroundColor: '#8c83c9'     \r\n                },\r\n                {\r\n                    label: 'Points',\r\n                    data: data_total_pts,\r\n                    borderColor: 'tomato',    \r\n                    fill: false,\r\n                    borderWidth: 2,\r\n                    pointStyle: 'cross',\r\n                    showLine: false\r\n                }\r\n            ]\r\n        }\r\n        set_chart_data(tempObj);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                chart_data && (\r\n                    <Line \r\n                        data={chart_data}\r\n                        width={320}\r\n                        height={320}\r\n                        redraw={false}\r\n                        options={{\r\n                            title: {\r\n                                display: false,\r\n                                text: props.Nma,\r\n                                fontSize: 25,\r\n                            },\r\n                            legend: {\r\n                                display: true,\r\n                                position: 'top'\r\n                            },\r\n                            showLines: true,\r\n                            animation: {\r\n                                duration: 500,\r\n                                easing: 'linear'\r\n                            }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineChartPointsMA;","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { sort_LOD_by_key } from '../misc_functions';\r\n\r\nconst BarPointsChart = ({pts_contrib}) => {\r\n    if (!pts_contrib) \r\n        return null;\r\n\r\n    let LOD = [];\r\n    for(const key of Object.keys(pts_contrib)) {\r\n        if (key === 'total_points') \r\n            continue;\r\n        if (Math.abs(pts_contrib[key]) > 2) {\r\n            const d = {};\r\n            d.label = key.replace('_', ' ');\r\n            d.value = pts_contrib[key];\r\n            LOD.push(d);\r\n        }\r\n    }\r\n    LOD = sort_LOD_by_key(LOD, 'value', false)\r\n    const chart_labels = LOD.map(x => x.label);\r\n    const chart_data = LOD.map(x => Math.abs(x.value));\r\n\r\n    const labels = chart_labels;\r\n    const data = {\r\n        labels: labels,\r\n        datasets: [{\r\n            label: 'Points contribution',\r\n            data: chart_data,\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.7)',\r\n                'rgba(255, 159, 64, 0.7)',\r\n                'rgba(255, 205, 86, 0.7)',\r\n                'rgba(75, 192, 192, 0.7)',\r\n                'rgba(54, 162, 235, 0.7)',\r\n                'rgba(153, 102, 255, 0.7)',\r\n                'rgba(201, 203, 207, 0.7)'\r\n            ],\r\n            borderColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(255, 159, 64)',\r\n                'rgb(255, 205, 86)',\r\n                'rgb(75, 192, 192)',\r\n                'rgb(54, 162, 235)',\r\n                'rgb(153, 102, 255)',\r\n                'rgb(201, 203, 207)'\r\n            ],\r\n            borderWidth: 1\r\n        }]\r\n    };\r\n\r\n    const config = {\r\n        data: data,\r\n        options: {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                      beginAtZero: true,\r\n                      min: 0\r\n                    }    \r\n                }]\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Points',\r\n                fontSize: 16,\r\n                fontColor: '#333',\r\n                fontWeight: 'bold'\r\n            },  \r\n            legend: {\r\n                display: false,\r\n            },          \r\n            maintainAspectRatio: false\r\n        },\r\n    };\r\n\r\n    return (  \r\n        <div>\r\n            <Bar\r\n                data={config.data}\r\n                width={600}\r\n                height={300}\r\n                redraw={false}\r\n                options={config.options}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BarPointsChart;","import React, { Component } from 'react';\r\nimport './PlayerInfo.css';\r\nimport PlayerStatsTable from './PlayerStatsTable';\r\nimport LineChartPointsMA from './LineChartPointsMA';\r\nimport BarPointsChart from './BarPointsChart';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { fetch_player_season_stats, fetch_player_gw_stats, fetch_fixture_list } from '../redux/actionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        player_season_stats_data: state.player_season_stats_data,\r\n        player_gw_stats_data: state.player_gw_stats_data,\r\n        fixture_list_data: state.fixture_list_data\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetch_player_season_stats: web_name_id => dispatch(fetch_player_season_stats(web_name_id)),\r\n        fetch_player_gw_stats: web_name_id => dispatch(fetch_player_gw_stats(web_name_id)),\r\n        fetch_fixture_list: () => dispatch(fetch_fixture_list())\r\n    };\r\n}\r\n\r\nconst MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\nconst Nma_L = 10;\r\nconst Nma_S = 5;\r\n\r\nconst season_stats_info_keys = [\r\n    { key: 'total_points',          heading_text: 'Pts'},\r\n    { key: 'minutes',               heading_text: 'Mins'},\r\n    { key: 'goals_scored',          heading_text: 'G'},\r\n    { key: 'assists',               heading_text: 'A'},\r\n    { key: 'clean_sheets',          heading_text: 'CS'},\r\n    { key: 'goals_conceded',        heading_text: 'GC'},\r\n    { key: 'bonus',                 heading_text: 'bonus'},\r\n    { key: 'yellow_cards',          heading_text: 'YC'},\r\n    { key: 'red_cards',             heading_text: 'RC'},\r\n    { key: 'saves',                 heading_text: 'saves'},\r\n    { key: 'penalties_saved',       heading_text: 'pens saved'},\r\n    { key: 'penalties_missed',      heading_text: 'pens missed'},\r\n    { key: 'own_goals',             heading_text: 'OG'},\r\n    { key: 'mins/(G + A)',          heading_text: 'mins/(G+A)'},\r\n    { key: 'pts/90min',             heading_text: 'pts/90min'},\r\n];\r\nconst season_stats_keys = season_stats_info_keys.map(x => x.key);\r\nconst season_stats_table_headings = season_stats_info_keys.map(x => x.heading_text);\r\n\r\nconst gw_stats_table_keys_list = [\r\n    { displayName: 'Date',              arrayKey: 'datetime',           type: 'string', sortDirection: 'asc'},\r\n    { displayName: 'GW',                arrayKey: 'round',              type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'Opposition',        arrayKey: 'opposition',         type: 'string', sortDirection: 'asc'},\r\n    { displayName: 'H/A',               arrayKey: 'home_away',          type: 'string', sortDirection: 'asc'},\r\n    { displayName: 'GF',                arrayKey: 'GF',                 type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'GA',                arrayKey: 'GA',                 type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'Mins',              arrayKey: 'minutes',            type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'Pts',               arrayKey: 'total_points',       type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'G',                 arrayKey: 'goals_scored',       type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'A',                 arrayKey: 'assists',            type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'CS',                arrayKey: 'clean_sheets',       type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'GC',                arrayKey: 'goals_conceded',     type: 'int',    sortDirection: 'asc'}, \r\n    { displayName: 'OG',                arrayKey: 'own_goals',          type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'YC',                arrayKey: 'yellow_cards',       type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'RC',                arrayKey: 'red_cards',          type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'Bonus',             arrayKey: 'bonus',              type: 'int',    sortDirection: 'asc'}, \r\n    { displayName: 'Saves',             arrayKey: 'saves',              type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'ma(Pts,L)',         arrayKey: 'pts_ma_L',           type: 'float',  sortDirection: 'asc'},\r\n    { displayName: 'ma(Pts,S)',         arrayKey: 'pts_ma_S',           type: 'float',  sortDirection: 'asc'},\r\n    { displayName: 'Transfers (k)',     arrayKey: 'transfers_balance',  type: 'int',    sortDirection: 'asc'},\r\n    { displayName: 'Price',             arrayKey: 'value',              type: 'int',    sortDirection: 'asc'},\r\n];\r\n\r\nconst excluded_columns = [\r\n    {\r\n        max_width: 450,\r\n        cols: ['transfers_balance', 'own_goals', 'saves', 'yellow_cards', 'red_cards', 'pts_ma_S', 'pts_ma_L', 'goals_conceded', 'value']\r\n    }, \r\n    {\r\n        max_width: 500,\r\n        cols: ['transfers_balance', 'own_goals', 'saves', 'yellow_cards', 'red_cards', 'pts_ma_S', 'pts_ma_L', 'goals_conceded']\r\n    }, \r\n    {\r\n        max_width: 560,\r\n        cols: ['transfers_balance', 'own_goals', 'saves', 'yellow_cards', 'red_cards', 'pts_ma_S', 'pts_ma_L']\r\n    }, \r\n    {\r\n        max_width: 700,\r\n        cols: ['transfers_balance', 'own_goals', 'saves', 'yellow_cards', 'red_cards', 'pts_ma_S']\r\n    }, \r\n    {\r\n        max_width: 840,\r\n        cols: ['transfers_balance', 'own_goals', 'saves']\r\n    },    \r\n    {\r\n        max_width: 99999,\r\n        cols: []\r\n    },\r\n];\r\n\r\nfunction get_filtered_keys_list(cols_list, excluded_cols) {\r\n    const excluded_cols_item = excluded_cols.find(x => x.max_width > window.innerWidth);\r\n    const excluded_cols_list = excluded_cols_item.cols;\r\n    const filtered_keys_list = cols_list.filter(x => !excluded_cols_list.includes(x.arrayKey));\r\n    return filtered_keys_list;\r\n}\r\n\r\n\r\nconst PlayerInfoTable = ({season_stats, web_name}) => {\r\n    const player_info_keys = [\r\n        'team_name',\r\n        'position',\r\n        'price',\r\n    ];\r\n    const longPositionName = {\r\n        'GK': 'Goalkeeper',\r\n        'DEF': 'Defender',\r\n        'MID': 'Midfield',\r\n        'FWD': 'Forward'\r\n    }\r\n\r\n    if (!season_stats) {\r\n        return null;\r\n    }\r\n    const displayVals = {};\r\n    displayVals.team_name = season_stats.team_name;\r\n    displayVals.position = longPositionName[season_stats.position];\r\n    displayVals.price = `£${season_stats.price}m`;\r\n    const img_fname = season_stats.photo.replace('jpg', 'png');\r\n    const cells = player_info_keys.map(key => <li key={`${key}-value`}>{ season_stats && displayVals[key] }</li>);\r\n\r\n    const JSX = (\r\n        <div className=\"player-info-banner\">\r\n            <ul className=\"player-info-list\">\r\n                <li key=\"web_name\" className=\"player-name-title\">{ web_name }</li>\r\n                { cells }\r\n            </ul>\r\n            <div className=\"player-img-div\">\r\n                <img src={`https://resources.premierleague.com/premierleague/photos/players/110x140/p${img_fname}`} alt={web_name} />\r\n            </div>\r\n        </div>\r\n    )\r\n    return JSX;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nclass PlayerInfo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let web_name_id = this.props.match.params.web_name_id;\r\n        this.state = {\r\n            web_name_id: web_name_id,\r\n            web_name: web_name_id.split('_').slice(0, -1).join('_'),\r\n            gw_data: undefined,\r\n            fixtures_dict: undefined,\r\n            fixtures_data: undefined,\r\n            season_stats: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `Fantasy Football Stats | ${this.state.web_name}`;\r\n        this.props.fetch_player_season_stats(this.state.web_name_id);\r\n        this.props.fetch_player_gw_stats(this.state.web_name_id); \r\n        this.props.fetch_fixture_list();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.player_season_stats_data !== this.props.player_season_stats_data) {\r\n            this.process_player_season_stats(this.props.player_season_stats_data);\r\n        }\r\n        if(prevProps.player_gw_stats_data !== this.props.player_gw_stats_data) {\r\n            this.process_player_gw_stats(this.props.player_gw_stats_data);\r\n        }\r\n        if(prevProps.fixture_list_data !== this.props.fixture_list_data) {\r\n            this.process_fixture_list(this.props.fixture_list_data);\r\n        }\r\n    }\r\n\r\n\r\n    process_player_season_stats(data) {\r\n        if (!data)\r\n            return;\r\n        data['mins/(G + A)'] = (data.goals_scored + data.assists) > 0 \r\n            ? Math.round(data.minutes / (data.goals_scored + data.assists))\r\n            : '-';\r\n        data['pts/90min'] = (data.minutes > 0 ? data.total_points / (data.minutes / 90) : 0).toFixed(1);\r\n        this.setState({\r\n            season_stats: data\r\n        }, () => this.calc_player_stats_table_values());\r\n    }\r\n\r\n\r\n    process_player_gw_stats(data) {\r\n        this.setState({\r\n            gw_data: data.gw_stats\r\n        }, () => this.calc_player_stats_table_values());     \r\n    }\r\n\r\n    process_fixture_list(data) {\r\n        const dict = {};\r\n        data.forEach(item => {\r\n            dict[item.game_id] = {\r\n                team_h_name: item.team_h_name,\r\n                team_a_name: item.team_a_name,\r\n                team_h_score: item.team_h_score,\r\n                team_a_score: item.team_a_score,\r\n            }\r\n        });\r\n        this.setState({\r\n            fixtures_dict: dict,\r\n            fixtures_data: data\r\n        });\r\n    }\r\n\r\n    calc_player_stats_table_values() {\r\n        if (!this.state.season_stats || !this.state.gw_data) {\r\n            return;\r\n        }\r\n\r\n        const calcPointsContribution = (season_stats, gw_data) => {\r\n\r\n            const get_pts_for_mins = (gw_data) =>  {\r\n                const mins_array = gw_data.map(gw => gw.minutes);\r\n                const pts_fn = mins => mins >= 60 ? 2 : (mins > 0 ? 1 : 0);\r\n                return mins_array.map(pts_fn).reduce((acc, cur) => acc + cur);\r\n            }\r\n    \r\n            const get_pts_for_saves = (position, gw_data) =>  {\r\n                const pts_array = gw_data.map(gw => {\r\n                    return position === 'GK' ?  Math.floor(gw.saves / 3) : 0;\r\n                });\r\n                return pts_array.reduce((acc, cur) => acc + cur);\r\n            }\r\n            \r\n            const get_pts_for_goals_conceded = (position, gw_data) => {\r\n                const pts_array = gw_data.map(gw => {\r\n                    return ['GK', 'DEF'].includes(position) ? -1 * Math.floor(gw.goals_conceded / 2) : 0;\r\n                });\r\n                return pts_array.reduce((acc, cur) => acc + cur);                                                           \r\n            }\r\n    \r\n            const get_pts_for_clean_sheets = (position, gw_data) => {\r\n                const pts_array = gw_data.map(gw => {\r\n                    if (gw.clean_sheets === 1 && gw.minutes >= 60) {\r\n                        switch(position) {\r\n                            case 'GK':\r\n                            case 'DEF':\r\n                                return 4;\r\n                            case 'MID':\r\n                                return 1;\r\n                            case 'FWD':\r\n                                return 0;\r\n                            default:\r\n                                return 0;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                });\r\n                return pts_array.reduce((acc, cur) => acc + cur);\r\n            }\r\n    \r\n            const get_pts_for_key = (season_stats, position) => {\r\n                const pts_for_positions = {\r\n                    penalties_saved:    { GK:    5, DEF:    0, MID:    0, FWD:    0 },\r\n                    penalties_missed:   { GK:   -2, DEF:   -2, MID:   -2, FWD:   -2 },\r\n                    bonus:              { GK:    1, DEF:    1, MID:    1, FWD:    1 },\r\n                    yellow_cards:       { GK:   -1, DEF:   -1, MID:   -1, FWD:   -1 },\r\n                    red_cards:          { GK:   -3, DEF:   -3, MID:   -3, FWD:   -3 },\r\n                    goals_scored:       { GK:    6, DEF:    6, MID:    5, FWD:    4 },\r\n                    assists:            { GK:    3, DEF:    3, MID:    3, FWD:    3 },\r\n                    own_goals:          { GK:   -2, DEF:   -2, MID:   -2, FWD:   -2 },\r\n                    total_points:       { GK:    1, DEF:    1, MID:    1, FWD:    1 },\r\n                };\r\n    \r\n                const pts_contrib = {}\r\n                Object.keys(pts_for_positions).forEach(key => {\r\n                    pts_contrib[key] = season_stats[key] * pts_for_positions[key][position];\r\n                });\r\n                return pts_contrib;\r\n            }\r\n        \r\n            const position = season_stats.position;\r\n            const pts_contrib = get_pts_for_key(season_stats, position);\r\n            pts_contrib.minutes = get_pts_for_mins(gw_data);\r\n            pts_contrib.saves = get_pts_for_saves(position, gw_data);\r\n            pts_contrib.goals_conceded = get_pts_for_goals_conceded(position, gw_data);\r\n            pts_contrib.clean_sheets = get_pts_for_clean_sheets(position, gw_data);\r\n            pts_contrib.total_points = season_stats.total_points;\r\n            return pts_contrib;\r\n        }\r\n    \r\n        const get_pts_contrib_percentage = (pts_contrib) => {\r\n            const pts_contrib_pct = {};\r\n            for (const key of Object.keys(pts_contrib)) {\r\n                pts_contrib_pct[key] = parseInt((100 * pts_contrib[key] / pts_contrib.total_points).toFixed(0));\r\n            }\r\n            return pts_contrib_pct;\r\n        }\r\n    \r\n        const get_stats_values = (season_stats) => {\r\n            const res = {};\r\n            season_stats_keys.forEach(key => {\r\n                if (key.includes('ppm')) {\r\n                    res[key] = season_stats[key].toFixed(4);\r\n                }\r\n                else {\r\n                    res[key] = season_stats[key];\r\n                } \r\n            })    \r\n            return res;\r\n        }\r\n    \r\n        const stats_values = get_stats_values(this.state.season_stats);\r\n        const pts_contrib = calcPointsContribution(this.state.season_stats, this.state.gw_data);\r\n        const pts_contrib_pct = get_pts_contrib_percentage(pts_contrib);\r\n\r\n        this.setState({\r\n            stats_values: stats_values,\r\n            pts_contrib: pts_contrib,\r\n            pts_contrib_pct: pts_contrib_pct\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getPlayerResultsTableHeadingsRow() {\r\n        const filtered_keys_list = get_filtered_keys_list(gw_stats_table_keys_list, excluded_columns);\r\n        const row = filtered_keys_list.map(x => {\r\n            return(\r\n                <th key={x.arrayKey} \r\n                    className={this.state.sortByKey === x.displayName ? 'heading-cell-sortByKey' : 'heading-cell-normal'} \r\n                    onClick={this.handleHeadingClick}\r\n                    >\r\n                    { x.displayName }\r\n                </th>\r\n            );\r\n        });\r\n        return row;\r\n    }\r\n\r\n    getPlayerResultsTableRow(gw_data) {\r\n        const fixtureInfo = this.state.fixtures_dict[gw_data.fixture];\r\n        const dt = new Date(gw_data.kickoff_time);\r\n        gw_data.datetime = `${dt.getDate().toString().padStart(2, '0')} ${MONTHS[dt.getMonth()]} ${dt.getFullYear()}`;\r\n\r\n        const players_team = this.state.season_stats.team_name;\r\n        if (fixtureInfo.team_h_name === players_team) {\r\n            gw_data.opposition = fixtureInfo.team_a_name;\r\n            gw_data.home_away = 'H';\r\n            gw_data.GF = fixtureInfo.team_h_score\r\n            gw_data.GA = fixtureInfo.team_a_score;\r\n        }\r\n        else {\r\n            gw_data.opposition = fixtureInfo.team_h_name;\r\n            gw_data.home_away = 'A';\r\n            gw_data.GF = fixtureInfo.team_a_score;\r\n            gw_data.GA = fixtureInfo.team_h_score;\r\n        }\r\n\r\n        const filtered_keys_list = get_filtered_keys_list(gw_stats_table_keys_list, excluded_columns);\r\n        const row = filtered_keys_list.map(x => {\r\n            let val = gw_data[x.arrayKey];\r\n            if (x.arrayKey === 'opposition') {\r\n                val = <Link to={`/teams/${gw_data.opposition.replace(' ', '_')}`}>{gw_data.opposition}</Link>\r\n            }\r\n            else if (x.arrayKey.includes('transfers_')) {\r\n                val = Math.round(gw_data[x.arrayKey] / 1000);\r\n            }\r\n            else if (x.arrayKey === 'value') {\r\n                val = Math.round(10 * gw_data.value) / 100;\r\n            }\r\n            if (x.type === 'string') {\r\n                return <td key={x.arrayKey}>{ val }</td>;\r\n            }\r\n            else {\r\n                return <td key={x.arrayKey} className=\"td-centre-text\">{ val }</td>\r\n            }\r\n        });\r\n        return row;\r\n    }\r\n\r\n    createPlayerResultsTableRows() {\r\n        const rows = this.state.gw_data.map((data, i) => {\r\n            return(\r\n                <tr key={i}>\r\n                    { this.getPlayerResultsTableRow(data) }\r\n                </tr>\r\n            );\r\n        })\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"player-info-page-container\">\r\n                <div className=\"player-info-flex-container\">\r\n                    <div className=\"player-info-container\">\r\n                        <div>\r\n                            <PlayerInfoTable season_stats={this.state.season_stats} web_name={this.state.web_name} />\r\n                        </div>\r\n                        <div className=\"stats-tables-container\">\r\n\r\n                            <div className=\"player-stats-table-container\">\r\n                                <PlayerStatsTable \r\n                                    stats_values={this.state.stats_values} \r\n                                    pts_contrib={this.state.pts_contrib}\r\n                                    pts_contrib_pct={this.state.pts_contrib_pct} \r\n                                    season_stats_info_keys={season_stats_info_keys}\r\n                                    season_stats_keys={season_stats_keys}\r\n                                    season_stats_table_headings={season_stats_table_headings}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"line-charts-container\">\r\n                                <span className=\"line-chart-span\">\r\n                                    <LineChartPointsMA \r\n                                        Nma={Nma_L} \r\n                                        var_name=\"Pts ma L\"\r\n                                        gw_data={this.state.gw_data} \r\n                                    />\r\n                                </span>\r\n                                <span className=\"line-chart-span\">\r\n                                    <LineChartPointsMA \r\n                                        Nma={Nma_S} \r\n                                        var_name=\"Pts ma S\"\r\n                                        gw_data={this.state.gw_data} \r\n                                    />\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"bar-chart-container\">\r\n                                <BarPointsChart pts_contrib={this.state.pts_contrib} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"player-results-table-container\">\r\n                            <table className=\"styled-table\">\r\n                                <thead><tr>{ this.getPlayerResultsTableHeadingsRow() }</tr></thead>\r\n                                <tbody>\r\n                                    {this.state.gw_data && this.state.fixtures_dict && this.createPlayerResultsTableRows() }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerInfo);","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { sort_LOD_by_key } from '../misc_functions';\r\nimport './TeamsStatsTable.css';\r\n\r\n\r\nfunction get_filtered_cols_list() {\r\n    const cols_list = ['team_name', 'P', 'W', 'D', 'L', 'GF', 'GA', 'GD', 'Pts', 'CS', 'GF_ma_S', 'GF_ma_L', 'difficulty_GF', \r\n                    'GA_ma_S', 'GA_ma_L', 'difficulty_GA'];\r\n    const excluded_columns = [\r\n        { max_width: 650, cols: ['GF_ma_S', 'GA_ma_S', 'difficulty_GF', 'difficulty_GA'] },\r\n        { max_width: 775, cols: ['GF_ma_S', 'GA_ma_S'] },\r\n        { max_width: 99999, cols: [] },\r\n    ]\r\n    const window_width = window.innerWidth;\r\n    const excluded_cols_item = excluded_columns.find(x => x.max_width > window_width);\r\n    const excluded_cols = excluded_cols_item.cols;\r\n    const filtered_keys_list = cols_list.filter(x => !excluded_cols.includes(x));\r\n    return filtered_keys_list;\r\n}\r\n\r\nconst TeamsStatsTable = (props) => {\r\n    const [sorted_teams_stats, set_sorted_teams_stats] = useState();\r\n    document.title = 'Fantasy Football Stats | Premier League Table';\r\n    const cols_list = get_filtered_cols_list();\r\n    \r\n    useEffect(() => {\r\n        if (!props.teams_stats)\r\n            return;\r\n        let temp_teams_stats = sort_LOD_by_key(props.teams_stats, 'team_name', true);\r\n        for (const key of ['GF', 'GD', 'Pts']) {\r\n            temp_teams_stats = sort_LOD_by_key(temp_teams_stats, key, false);\r\n        }\r\n        set_sorted_teams_stats(temp_teams_stats);\r\n    }, [props]);\r\n\r\n    const get_headings_row = () => {\r\n        const substitution_headings = {\r\n            team_name: 'team',\r\n            GF_ma_S: 'ma(GF,S)',\r\n            GF_ma_L: 'ma(GF,L)',\r\n            GA_ma_S: 'ma(GA,S)',\r\n            GA_ma_L: 'ma(GA,L)',\r\n        }\r\n        const cells = cols_list.map(key => {\r\n            let key_val = key;\r\n            if (key in substitution_headings) {\r\n                key_val = substitution_headings[key];\r\n            }\r\n            return <th key={key}>{key_val.replace(/_/g, ' ')}</th>;\r\n        })\r\n        return <tr>{ cells }</tr>;\r\n    }\r\n\r\n    const get_table_row = (team_dict) => {\r\n        const cols_list = get_filtered_cols_list();\r\n        const row_cells = cols_list.map(key => {\r\n            let val = team_dict[key];\r\n            if (key === 'team_name') {\r\n                val = <Link to={`/teams/${team_dict.team_name.replace(' ', '_')}`}>{ team_dict.team_name }</Link>;\r\n                return <td key={team_dict.team_name} className=\"team-name\">{ val }</td>;\r\n            }\r\n            else if (['avg_GF', 'avg_GA', 'norm_GF', 'norm_GA'].includes(key)) {\r\n                val = team_dict[key].toFixed(1);\r\n            }\r\n            return <td key={key}>{val}</td>;\r\n        });\r\n        return <tr key={team_dict.team_name}>{ row_cells }</tr>;\r\n    }\r\n\r\n    return (  \r\n        <div className=\"teams-stats-table-container\">\r\n            <table className=\"styled-table\">\r\n                <thead>\r\n                    { get_headings_row()}\r\n                </thead>\r\n                <tbody>\r\n                    { sorted_teams_stats && sorted_teams_stats.map(team_dict => get_table_row(team_dict)) }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TeamsStatsTable;","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport { fetch_team_fixture_list } from '../redux/actionCreators';\r\n\r\nimport './Teams.css';\r\n\r\nconst headings = ['Date', 'GW', 'Team', 'H/A', 'GF', 'GA'];\r\nconst keys_list = ['datetime', 'gw', 'team_name', 'home_away', 'GF', 'GA'];\r\n\r\nconst MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\nconst MOBILE_WIDTH_MAT = 700;\r\n\r\nconst Teams = (props) => {\r\n    const [team_name, set_team_name] = useState();\r\n    const [team_code, set_team_code] = useState();\r\n    const fixture_list = useSelector(state => state.team_fixture_list);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const team_name_val = props.match.params.team_name;\r\n        document.title = `Fantasy Football Stats | ${team_name_val.replace('_', ' ')} Fixtures`;\r\n        if(team_name_val) {\r\n            set_team_name(team_name_val);\r\n            dispatch(fetch_team_fixture_list(team_name_val));\r\n        }           \r\n    }, [dispatch, props.match.params.team_name]);\r\n\r\n    useEffect(() => {\r\n        if (props.team_ids && team_name) {\r\n            const team_id_obj = props.team_ids.find(team_id_dict => team_id_dict.name === team_name.replace('_', ' '));\r\n            if(team_id_obj)\r\n                set_team_code(team_id_obj.code);\r\n        }\r\n    }, [team_name, props.team_ids]);\r\n\r\n    const get_fixture_lists = () => {\r\n        if (!fixture_list) {\r\n            return null;\r\n        }\r\n        else if (window.innerWidth > MOBILE_WIDTH_MAT) {\r\n            return (\r\n                <div className=\"fixture-tables-container\">\r\n                    <FixturesTable fixture_list={fixture_list.slice(0, 19)} />\r\n                    <FixturesTable fixture_list={fixture_list.slice(19, fixture_list.length)} />\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"fixture-tables-container\">\r\n                    <FixturesTable fixture_list={fixture_list} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (  \r\n        <div className=\"teams-container\">\r\n            <h3>{ team_code && <img src={`https://resources.premierleague.com/premierleague/badges/50/t${team_code}.png`} alt={team_name} />}\r\n                { team_name && team_name.replace('_', ' ') } fixtures\r\n            </h3>\r\n                { get_fixture_lists() } \r\n        </div>\r\n    );\r\n}\r\n \r\n\r\nconst FixturesTable = ({fixture_list}) => {\r\n    function get_headings_row() {\r\n        const row_cells = headings.map(key => <th key={key}>{ key }</th>);\r\n        return <tr>{row_cells}</tr>;\r\n    }\r\n\r\n    function get_table_rows() {\r\n        const table_rows = fixture_list.map(fixture => {\r\n            const row_cells = keys_list.map(key => {\r\n                let val = fixture[key];\r\n                if (key === 'datetime') {\r\n                    const dt = new Date(fixture.datetime);\r\n                    val = `${dt.getDate().toString().padStart(2, '0')} ${MONTHS[dt.getMonth()]} ${dt.getFullYear()}`;\r\n                }\r\n                else if (key === 'team_name') {\r\n                    val = <Link to={`/teams/${fixture.team_name.replace(' ', '_')}`}>{fixture.team_name}</Link>\r\n                }\r\n                else if (key === 'home_away') {\r\n                    val = fixture.home_away.toUpperCase();\r\n                }\r\n                return <td key={key}>{ val }</td>; \r\n            });\r\n            return <tr key={fixture.game_id}>{ row_cells }</tr>\r\n        });\r\n        return table_rows;\r\n    }\r\n\r\n    return (  \r\n        <div className=\"fixture-list-container\">\r\n            <table className=\"styled-table\">\r\n                <thead>\r\n                    { get_headings_row() }\r\n                </thead>\r\n                <tbody>\r\n                    { fixture_list && get_table_rows() }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default withRouter(Teams);","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport TeamsStatsTable from './TeamsStatsTable';\r\nimport Teams from './Teams';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetch_teams_stats } from '../redux/actionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        team_ids: state.team_ids_data,\r\n        teams_stats: state.teams_stats,\r\n        team_fixture_list: state.team_fixture_list\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetch_teams_stats: () => dispatch(fetch_teams_stats()),\r\n    };\r\n}\r\n\r\n\r\nclass TeamsContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            team_name: undefined,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const team_name = this.props.match.params.team_name;\r\n        if (team_name !== undefined) {\r\n            this.setState({\r\n                team_name: team_name.replace('_', ' ')\r\n            });\r\n        }\r\n        this.props.fetch_teams_stats();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"teams-page-container\">\r\n                <Switch>\r\n                    <Route path=\"/teams/:team_name\">\r\n                        <Teams team_ids={this.props.team_ids} />\r\n                    </Route>\r\n                    <Route path=\"/teams\">\r\n                        <TeamsStatsTable teams_stats={this.props.teams_stats} />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamsContainer);","import React, { Component } from 'react';\r\nimport './Fixtures.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { fetch_fixture_difficulty, fetch_team_ids } from '../redux/actionCreators';\r\n\r\nconst DEFAULT_TRANSPARENCY = 0.65;\r\nconst MAX_GW_COLUMNS = 10;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        fixture_difficulty_data: state.fixture_difficulty_data,\r\n        teams_data: state.team_ids_data\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetch_fixture_difficulty: () => dispatch(fetch_fixture_difficulty()),\r\n        fetch_team_ids: () => dispatch(fetch_team_ids())\r\n    };\r\n}\r\n\r\n\r\nfunction unique(arr) {\r\n    const set_var = new Set();\r\n    arr.map(x => set_var.add(x));\r\n    return [...set_var].sort((a, b) => {\r\n        if (parseInt(a) < parseInt(b)) return -1;\r\n        if (parseInt(a) > parseInt(b)) return 1;\r\n        return 0;\r\n    });;\r\n}\r\n\r\n\r\nfunction get_colour_gradient_rgb(x, a=DEFAULT_TRANSPARENCY) {\r\n    let r, g, b;\r\n    if (x >= 0 && x <= 5) {\r\n        r = Math.round((x / 5) * 255);\r\n        g = 255;\r\n        b = 0;\r\n    }\r\n    else {\r\n        r = 255;\r\n        g = Math.round(255 * (1 - ((x - 5) / 5)));\r\n        b = 0;\r\n    }\r\n    return `rgb(${r}, ${g}, ${b}, ${a})`;\r\n}\r\n\r\nclass Fixtures extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fixture_list: [],\r\n            fixtures_dict: {},\r\n            gws_remaining: [],\r\n            teams: [],\r\n            teams_info: [],\r\n            Nmax_games: 0\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        document.title = 'Fantasy Football Stats | Fixtures';\r\n        this.props.fetch_fixture_difficulty();\r\n        this.props.fetch_team_ids();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.fixture_difficulty_data && prevProps.fixture_difficulty_data !== this.props.fixture_difficulty_data) {\r\n            this.process_fixture_difficulty_data(this.props.fixture_difficulty_data);\r\n        }\r\n\r\n        if (this.props.teams_data && prevProps.teams_data !== this.props.teams_data) {\r\n            this.process_teams_data(this.props.teams_data);\r\n        }\r\n    }\r\n\r\n    process_fixture_difficulty_data(fixtures) {\r\n        const all_gws_list = fixtures\r\n                                .map(x => x.datetime > (new Date()).toISOString() ? x.gw : false)\r\n                                .filter(x => x !== false);                \r\n        const gws_remaining = unique(all_gws_list);\r\n\r\n        const home_teams = fixtures.map(x => x.team_h_name);\r\n        const away_teams = fixtures.map(x => x.team_a_name);\r\n        const teams = unique(home_teams.concat(away_teams));\r\n\r\n        const fixtures_dict = {};\r\n        teams.forEach(team => {\r\n            fixtures_dict[team] = {};\r\n            gws_remaining.forEach(gw => fixtures_dict[team][gw] = []);\r\n        });\r\n        let Nmax_games = 0;\r\n        fixtures.forEach(game => {\r\n            if (game.datetime > new Date().toISOString()) {              \r\n                const home_team = {}\r\n                home_team.team = game.team_h_name;\r\n                home_team.opponent = game.team_a_name;\r\n                home_team.difficulty_defence = game.difficulty_GF_A;\r\n                home_team.difficulty_attack = game.difficulty_GA_A;\r\n                home_team.difficulty_defence_color = get_colour_gradient_rgb(game.difficulty_GF_A);\r\n                home_team.difficulty_attack_color = get_colour_gradient_rgb(game.difficulty_GA_A);\r\n                home_team.game_id = game.game_id;\r\n                home_team.home_away = 'H';\r\n                const away_team = {}\r\n                away_team.team = game.team_a_name;\r\n                away_team.opponent = game.team_h_name;\r\n                away_team.difficulty_defence = game.difficulty_GF_H;\r\n                away_team.difficulty_attack = game.difficulty_GA_H;\r\n                away_team.difficulty_defence_color = get_colour_gradient_rgb(game.difficulty_GF_H);\r\n                away_team.difficulty_attack_color = get_colour_gradient_rgb(game.difficulty_GA_H);\r\n                away_team.home_away = 'A';\r\n                away_team.game_id = game.game_id;\r\n                fixtures_dict[game.team_h_name][game.gw].push(home_team);\r\n                fixtures_dict[game.team_a_name][game.gw].push(away_team);\r\n                Nmax_games = Math.max(Nmax_games, fixtures_dict[game.team_h_name][game.gw].length, \r\n                                                  fixtures_dict[game.team_a_name][game.gw].length);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            fixture_list: fixtures,\r\n            fixtures_dict: fixtures_dict,\r\n            gws_remaining: gws_remaining.slice(0, MAX_GW_COLUMNS),\r\n            teams: teams,\r\n            Nmax_games: Nmax_games\r\n        });\r\n    }\r\n\r\n    process_teams_data(teams_info) {\r\n        const short_team_name_lookup = {};\r\n        teams_info.forEach(team => {\r\n            short_team_name_lookup[team.name] = team.short_name;\r\n        });\r\n\r\n        this.setState({ \r\n            teams_info: teams_info,\r\n            short_team_name_lookup: short_team_name_lookup\r\n        })\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getGameJSX(key, short_team_name, suffix, difficulty_score, backgroundColor, div_height) {\r\n        return (\r\n            <div key={key} className=\"table-cell-div\" style={{ backgroundColor: `${backgroundColor}`, height: `${div_height}px`}}>\r\n                <div className=\"table-cell-inner-div\">\r\n                    <span className=\"short_team_name\">{ short_team_name }</span> \r\n                    <span className=\"game_suffix\"> { suffix }</span>\r\n                    <span className=\"game_suffix\"> {difficulty_score}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getTableRows(attack_defence) {\r\n        const rows = this.state.teams.map(team => {\r\n            const row = this.state.gws_remaining.map(gw => {\r\n                let key;\r\n                let short_team_name;\r\n                let suffix;\r\n                let backgroundColor;\r\n                let difficulty_score;\r\n                let div_height;\r\n                const row_height = this.state.Nmax_games === 1 ? 32 : 25 * this.state.Nmax_games;\r\n                let JSX;\r\n                if (this.state.short_team_name_lookup === undefined) {\r\n                    key = 0;\r\n                    short_team_name = 'error';\r\n                    suffix = '';\r\n                    difficulty_score = '';\r\n                    backgroundColor = 'black';\r\n                    div_height = row_height;\r\n                    JSX = this.getGameJSX(key, short_team_name, suffix, difficulty_score, backgroundColor, div_height);\r\n                }\r\n                else if (this.state.fixtures_dict[team][gw].length === 0) {\r\n                    key = 0;\r\n                    short_team_name = '-';\r\n                    suffix = '';\r\n                    difficulty_score = '';\r\n                    backgroundColor = 'lightgrey';\r\n                    div_height = row_height;\r\n                    JSX = this.getGameJSX(key, short_team_name, suffix, difficulty_score, backgroundColor, div_height);\r\n                }\r\n                else if(this.state.fixtures_dict[team][gw].length >= 1) {\r\n                    const Ngames = this.state.fixtures_dict[team][gw].length;\r\n                    JSX = [];\r\n                    for (let i=0; i<Ngames; i++) {\r\n                        const game = this.state.fixtures_dict[team][gw][i];\r\n                        key = i;\r\n                        short_team_name = this.state.short_team_name_lookup[game.opponent];\r\n                        suffix = `(${game.home_away})`;\r\n                        difficulty_score = game[`difficulty_${attack_defence}`];\r\n                        backgroundColor = game[`difficulty_${attack_defence}_color`];\r\n                        div_height = Math.round(row_height / Ngames);\r\n\r\n                        const temp = this.getGameJSX(key, short_team_name, suffix, difficulty_score, backgroundColor, div_height);\r\n                        JSX.push(temp);\r\n                    }\r\n                }\r\n                return (\r\n                    <td key={ gw } style={{ backgroundColor: 'white'}}>\r\n                        { JSX }\r\n                    </td>\r\n                );\r\n            });\r\n            row.unshift(\r\n                <td key={team} className=\"team_column\"><Link to={`/teams/${team.replace(' ', '_')}`}>{ team }</Link></td>);  \r\n            return (\r\n                <tr key={team}>{ row }</tr>\r\n            )\r\n        });\r\n        return rows;\r\n    }\r\n\r\n    create_fixtures_table(attack_defence) {\r\n        return (\r\n            <table className=\"styled-table\">\r\n                <thead>\r\n                    <tr key=\"headings_row\">\r\n                        <th key=\"team\">Team</th>\r\n                        { this.state.fixture_list.length > 0 && this.state.gws_remaining.map(gw => <th key={gw}>GW{ gw }</th>) }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { this.state.fixture_list.length > 0 && this.getTableRows(attack_defence) }  \r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.fixture_list.length > 0) {\r\n            return (\r\n                <div className=\"fixtures_tables_container\">\r\n                    <div className=\"fixtures_table\">\r\n                        <h3>Fixture Difficulty for Midfielders &amp; Forwards</h3>\r\n                        { this.create_fixtures_table('attack') }\r\n                    </div>                    \r\n                    <div className=\"fixtures_table\">\r\n                        <h3>Fixture Difficulty for Goalkeepers &amp; Defenders</h3>\r\n                        { this.create_fixtures_table('defence') }\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"fixtures_tables_container\">\r\n                    <div className=\"fixtures_table no_fixtures_remaining\">\r\n                        <h3>There are no fixtures left this season.</h3>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Fixtures);\r\n\r\n\r\n","import React from 'react';\r\n\r\nfunction FileNotFound() { \r\n    const flexboxStyles = {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        minHeight: \"400px\"\r\n    };\r\n    return ( \r\n        <div style={flexboxStyles} className=\"container\">\r\n            <h3>Error 404: File Not Found.</h3>\r\n        </div>\r\n    );\r\n  }\r\n   \r\n  export default FileNotFound;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './LeagueTable.css';\r\n\r\nconst SMALLER_MOBILE_MAX_WIDTH = 420;\r\nconst MOBILE_MAX_WIDTH = 550;\r\n\r\nfunction get_filtered_headings_list() {\r\n    if (window.innerWidth < SMALLER_MOBILE_MAX_WIDTH) {\r\n        return ['Team', 'Prev pts', 'Deducted', 'Curr pts', 'Sub', 'Total'];\r\n    }\r\n    else if (window.innerWidth < MOBILE_MAX_WIDTH) {\r\n        return ['Rank', 'Team', 'Prev pts', 'Deducted', 'Curr pts', 'Sub', 'Total'];\r\n    }\r\n    else {\r\n        return ['Rank', 'Team', 'Manager', 'Prev pts', 'Pts deducted', 'Curr pts', 'Sub pts', 'Total pts'];\r\n    }\r\n}\r\n\r\nfunction get_filtered_cols_list() {\r\n    if (window.innerWidth < SMALLER_MOBILE_MAX_WIDTH) {\r\n        return ['Team', 'Prev pts', 'Pts deducted', 'Curr pts', 'Sub pts', 'Total pts'];\r\n    }\r\n    else if (window.innerWidth < MOBILE_MAX_WIDTH) {\r\n        return ['Rank', 'Team', 'Prev pts', 'Pts deducted', 'Curr pts', 'Sub pts', 'Total pts'];\r\n    }\r\n    else {\r\n        return ['Rank', 'Team', 'Manager', 'Prev pts', 'Pts deducted', 'Curr pts', 'Sub pts', 'Total pts'];\r\n    }\r\n}\r\n\r\n\r\nfunction LeagueTable({curr_gw, league_id, manager_ids, league_table_dict, league_name})  {\r\n    document.title = `Fantasy Football Stats | ${league_name} League Table`;\r\n\r\n    const table_headings_row = () => {\r\n        const headings_list = get_filtered_headings_list();\r\n        const table_heading_cells = headings_list.map(col_name => {\r\n            let val = col_name;\r\n            if(col_name === 'Prev pts') {\r\n                val = `GW ${curr_gw && curr_gw - 1}`;\r\n            }\r\n            else if(col_name === 'Curr pts') {\r\n                val = `GW ${curr_gw && curr_gw}`;\r\n            }\r\n            return <th key={col_name}>{ val }</th>;\r\n        });         \r\n        return (<tr>{ table_heading_cells }</tr>);\r\n    }\r\n\r\n    const table_body_rows = () => {\r\n        const cols_list = get_filtered_cols_list();\r\n        const start_idx = cols_list.includes('Rank') ? 2 : 1;\r\n        const rows = manager_ids.map((manager_id, i) => {\r\n            return (\r\n                <tr key={manager_id}>\r\n                    { cols_list.includes('Rank') ? <td key=\"rank\">{ manager_ids.length > 1 ? i+1 : '' }</td> : null}\r\n                    <td key=\"team\">\r\n                        <Link to={`/leagues/${league_id}/${manager_id}/`}>\r\n                            { league_table_dict && league_table_dict[manager_id]['team']}\r\n                        </Link>\r\n                    </td>\r\n                    {\r\n                        cols_list.slice(start_idx).map(col_name => {\r\n                            const key_name = col_name.toLowerCase().replace(' ', '_');\r\n                            const val = league_table_dict && league_table_dict[manager_id][key_name];\r\n                            return (\r\n                                <td key={key_name}>{ val }</td>\r\n                            );\r\n                        })\r\n                    }\r\n                </tr>\r\n            );\r\n        });\r\n        return rows;\r\n    }\r\n\r\n    return (\r\n        <div className=\"league-table-container\">\r\n            <h3>{ league_name }</h3>\r\n            <table className=\"styled-table\">\r\n                <thead>{ table_headings_row() }</thead>\r\n                <tbody>{ table_body_rows() }</tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default LeagueTable;","import React, { Component } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport LeagueTable from './LeagueTable';\r\nimport './Squad.css';\r\n\r\nconst TOTALS_BG_COLOR = 'lightgreen';\r\nconst SUBSTITUTES_BG_COLOR = '#dbe4f0';\r\n\r\nconst keys_info_list = [\r\n    { key: 'web_name',          heading_text: 'Player'},\r\n    { key: 'team_name',         heading_text: 'Team'}, \r\n    { key: 'curr_gw_game',      heading_text: 'Games'}, \r\n    { key: 'position',          heading_text: 'Position'}, \r\n    { key: 'captain',           heading_text: 'Captain'}, \r\n    { key: 'on_bench',          heading_text: 'Sub'},\r\n];\r\n\r\nconst stats_info_list = [\r\n    { key: 'total_points',          heading_text: 'Points'},\r\n    { key: 'minutes',               heading_text: 'Mins'},\r\n    { key: 'goals_scored',          heading_text: 'G'},\r\n    { key: 'assists',               heading_text: 'A'},\r\n    { key: 'goals_conceded',        heading_text: 'GC'},\r\n    { key: 'clean_sheets',          heading_text: 'CS'},\r\n    { key: 'bonus',                 heading_text: 'Bonus'},\r\n    { key: 'yellow_cards',          heading_text: 'YC'},\r\n    { key: 'red_cards',             heading_text: 'RC'},\r\n    { key: 'saves',                 heading_text: 'Saves'},\r\n    { key: 'penalties_saved',       heading_text: 'Pens saved'},\r\n    { key: 'penalties_missed',      heading_text: 'Pens missed'},\r\n    { key: 'own_goals',             heading_text: 'OG'},\r\n];\r\n\r\nconst player_info_headings = keys_info_list.map(x => x.heading_text);\r\nconst player_info_keys = keys_info_list.map(x => x.key);\r\nconst stats_headings = stats_info_list.map(x => x.heading_text);\r\nconst stats_keys = stats_info_list.map(x => x.key);\r\n\r\n\r\nclass Squad extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  \r\n            curr_gw: undefined,\r\n            league_id: undefined,\r\n            manager_id: undefined,\r\n            squad_dict: undefined,\r\n            team_info: undefined,\r\n            teams_lookup: undefined\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            manager_id: this.props.match.params.manager_id,\r\n            league_id: this.props.match.params.league_id,\r\n            manager_id_as_array: [this.props.match.params.manager_id]\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.manager_id) {\r\n            if (this.props.curr_gw && prevState.curr_gw !== this.props.curr_gw) {\r\n                this.setState({ \r\n                    curr_gw: this.props.curr_gw\r\n                });\r\n            }\r\n\r\n            if (this.state.manager_id && this.props.squads_dict && prevState.squads_dict !== this.props.squads_dict) {\r\n                this.setState({ \r\n                    squads_dict: this.props.squads_dict,\r\n                    squad_dict: this.props.squads_dict[this.state.manager_id]\r\n                });\r\n            }\r\n\r\n            if (this.state.manager_id && this.props.league_table_dict && prevState.league_table_dict !== this.props.league_table_dict) {\r\n                const team_info = this.props.league_table_dict[this.state.manager_id];\r\n                document.title = `Fantasy Football Stats | ${team_info.team} Squad`;\r\n                this.setState({ \r\n                    team_info: team_info,\r\n                    league_table_dict: this.props.league_table_dict\r\n                });\r\n            }          \r\n        }\r\n    }\r\n\r\n    get_table_headings_row = () => {\r\n        const player_info_th_cells = player_info_headings.map(k => <th key={k}>{ k }</th>);\r\n        const stats_th_cells = stats_headings.map(k => <th key={k}>{ k }</th>);\r\n        return <tr key=\"headings\">{ player_info_th_cells.concat(stats_th_cells) }</tr>;\r\n    }\r\n\r\n    captainDidNotPlay(squad) {\r\n        for (const player of squad) {\r\n            if (player.captain === true) {\r\n                return player.did_play === false;\r\n            }   \r\n        };\r\n    }\r\n\r\n    get_table_row_dict = (player) => {\r\n        const row_dict = {};\r\n        player_info_keys.forEach(key => {\r\n            let val = player[key];\r\n            row_dict.player_id = player.player_id;\r\n            if (key === 'captain') {\r\n                if (player.captain) {\r\n                    val = this.state.team_info.chip_status === '3xc' ? '3xC' : 'C';\r\n                } \r\n                else if (player.vice_captain) {\r\n                    val = this.state.team_info.chip_status === '3xc' ? '3xV' : 'V';\r\n                }\r\n            }\r\n            else if (key === 'curr_gw_game') {\r\n                val = player.curr_gw_game.map(game => {\r\n                    const d = {};\r\n                    d.datetime = game.datetime;\r\n                    d.opposition = game.opposition;\r\n                    d.game_status = game.game_status;\r\n                    return d;\r\n                });\r\n            }\r\n            else if (key === 'on_bench') {\r\n                val = player.on_bench ? 'Sub' : '';\r\n            }\r\n            row_dict[key] = val;\r\n        });\r\n        const captain_status = this.state.squad_dict.captain_status;\r\n        stats_keys.forEach(key => {\r\n            let val = player.stats[key];\r\n            if (key === 'total_points') {\r\n                if (player.captain && ['2xC', '3xC'].includes(captain_status)) {\r\n                    val = captain_status === '2xC' ? val * 2 : (captain_status === '3xC' ? val * 3 : val); \r\n                }\r\n                else if (player.vice_captain && ['2xV', '3xV'].includes(captain_status)) {\r\n                    val = captain_status === '3xV' ? val * 3 : (captain_status === '2xV' ? val * 2 : val); \r\n                }\r\n            }\r\n            row_dict[key] = val;\r\n        });\r\n        return row_dict;\r\n    }\r\n    \r\n    calc_stats_totals(LOD) {\r\n        const totals = {};\r\n        totals.web_name = 'Total';\r\n        stats_keys.forEach(key => totals[key] = 0);\r\n        LOD.forEach(player => {\r\n            stats_keys.forEach(key => totals[key] += player[key]);\r\n        })\r\n        return totals;\r\n    }\r\n\r\n    create_table_row = (player, row_bg_color) => {\r\n        const keys_list = player_info_keys.concat(stats_keys);\r\n        const row_cells = keys_list.map(key => {\r\n            let val = player[key];\r\n            if (key === 'web_name') {\r\n                const web_name_id = `${player.web_name.replace(' ', '_')}_${player.player_id}`;\r\n                val = <Link to={`/players/${web_name_id}`}>{player.web_name}</Link>;\r\n            }\r\n            else if (key === 'team_name') {\r\n                const team_name = player.team_name.replace(' ', '_');\r\n                val = <Link to={`/teams/${team_name}`}>{player.team_name}</Link>;\r\n            }\r\n            else if (key === 'curr_gw_game') {\r\n                val = player.curr_gw_game.map(game => {\r\n                    let class_name;\r\n                    if (game.game_status === 'not_started') {\r\n                        class_name = 'curr_gw_game_not_started';\r\n                    }\r\n                    else if (game.game_status === 'in_progress') {\r\n                        class_name = 'curr_gw_game_in_progress';\r\n                    }\r\n                    else {\r\n                        class_name = 'curr_gw_game_finished';\r\n                    }\r\n                    return <div key={`${player.player_id}|${game.game_id}`} className={class_name}>{game.opposition}</div>\r\n                });\r\n            }\r\n\r\n            switch(key) {\r\n                case 'web_name':\r\n                case 'team_name':\r\n                    return <td key={key} style={{textAlign: 'left'}}>{val}</td>;\r\n                case 'curr_gw_game':\r\n                    return <td key={key} style={{padding: '0px', margin: '0px'}}>{val}</td>;\r\n                default:\r\n                    return <td key={key}>{val}</td>;\r\n            }\r\n        });\r\n        let row;\r\n        if(row_bg_color) {\r\n            row = <tr key={player.player_id} style={{backgroundColor: row_bg_color}}>{row_cells}</tr>;\r\n        }\r\n        else {\r\n            row = <tr key={player.player_id}>{row_cells}</tr>;\r\n        }\r\n        return row;\r\n    }\r\n\r\n    create_totals_row = (totals_dict, row_bg_color) => {\r\n        const keys_list = player_info_keys.concat(stats_keys);\r\n        const row_cells = keys_list.map(key => {\r\n            return (key === 'web_name' \r\n                        ? <td key={key} style={{textAlign: 'left'}}>{totals_dict[key]}</td> \r\n                        : <td key={key}>{totals_dict[key]}</td>);\r\n        }); \r\n        const row = <tr key=\"totals\" style={{backgroundColor: row_bg_color}}>{row_cells}</tr>;       \r\n        return row; \r\n    }\r\n\r\n    get_table_rows() {\r\n        const { squad_dict } = this.state;\r\n        const player_ids = squad_dict.squad.map(player => player.player_id);\r\n        const firstXI_player_ids = squad_dict.final_firstXI.map(player => player.player_id);\r\n        const substitute_player_ids = player_ids.filter(player_id => !firstXI_player_ids.includes(player_id))\r\n        const squad_lookup = {};\r\n        squad_dict.squad.forEach(player => squad_lookup[player.player_id] = player);\r\n        const firstXI_LOD = firstXI_player_ids.map(player_id => this.get_table_row_dict(squad_lookup[player_id]));\r\n        const substitute_LOD = substitute_player_ids.map(player_id => this.get_table_row_dict(squad_lookup[player_id]));\r\n        const firstXI_totals_dict = this.calc_stats_totals(firstXI_LOD);\r\n        const substitute_totals_dict = this.calc_stats_totals(substitute_LOD);\r\n        const firstXI_rows = firstXI_LOD.map(player => this.create_table_row(player));\r\n        const substitute_rows = substitute_LOD.map(player => this.create_table_row(player, SUBSTITUTES_BG_COLOR));\r\n        let totals_row;\r\n        if (this.state.team_info.chip_status === 'bboost') {\r\n            let totals_dict = {};\r\n            Object.keys(firstXI_totals_dict).forEach(key => totals_dict[key] = firstXI_totals_dict[key] + substitute_totals_dict[key]);\r\n            totals_dict.web_name = 'Total';\r\n            totals_row = this.create_totals_row(totals_dict, TOTALS_BG_COLOR);\r\n        }\r\n        else {\r\n            totals_row = this.create_totals_row(firstXI_totals_dict, TOTALS_BG_COLOR);\r\n        }\r\n        return firstXI_rows.concat(substitute_rows).concat(totals_row);\r\n    }\r\n\r\n    render() { \r\n        return (  \r\n            <div className=\"squad-container\">\r\n                <div className=\"title-container\">\r\n                    <span className=\"title-text\"><Link to={`/leagues/${this.props.league_id}`}>{this.props.league_name}</Link></span>\r\n                    <span className=\"title-text\">&nbsp;&gt;&nbsp;{ this.state.team_info && this.state.team_info.team }</span>\r\n                </div>\r\n                <div className=\"league-table-container\">\r\n                    {this.state.squad_dict \r\n                        && <LeagueTable \r\n                                curr_gw={this.state.curr_gw}\r\n                                league_id={this.state.league_id}\r\n                                manager_ids={this.state.manager_id_as_array}\r\n                                league_table_dict={this.state.league_table_dict}\r\n                                league_name={''}\r\n                            />\r\n                    }\r\n                </div>\r\n                <div className=\"squad-table-container\">\r\n                    { this.state.squad_dict ? (\r\n                            <table className=\"styled-table\">\r\n                                <thead>\r\n                                    { this.get_table_headings_row() }\r\n                                </thead>\r\n                                <tbody>\r\n                                    { this.get_table_rows() }\r\n                                </tbody>\r\n                            </table>\r\n                        )\r\n                        : <h3>There are no fixtures left this season.</h3>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withRouter(Squad);","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { sort_LOD_by_key, create_lookup_dict } from '../misc_functions';\r\nimport LeagueTable from './LeagueTable';\r\nimport Squad from './Squad';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    fetch_league_info, \r\n    fetch_live_data, \r\n    fetch_squads_for_league_id,\r\n    fetch_curr_gw\r\n} from '../redux/actionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading_league_info: state.loading_league_info,\r\n        league_info_data: state.league_info_data,\r\n        loading_live_data: state.loading_live_data,\r\n        live_data: state.live_data,\r\n        loading_squads_for_league_id: state.loading_squads_for_league_id,\r\n        squads_for_league_id_data: state.squads_for_league_id_data,\r\n        loading_curr_gw: state.loading_curr_gw,\r\n        curr_gw: state.curr_gw,\r\n        teams: state.team_ids_data\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetch_league_info: league_id => dispatch(fetch_league_info(league_id)),\r\n        fetch_live_data: curr_gw => dispatch(fetch_live_data(curr_gw)),\r\n        fetch_squads_for_league_id: (league_id, curr_gw) => dispatch(fetch_squads_for_league_id(league_id, curr_gw)),\r\n        fetch_curr_gw: () => dispatch(fetch_curr_gw())\r\n    };\r\n}\r\n\r\nfunction get_game_status(game_start_datetime) {\r\n    const game_datetime = game_start_datetime;\r\n    const curr_datetime = (new Date()).toISOString();\r\n    const game_date_time_array = game_datetime.split('T');\r\n    const game_starttime_array = game_date_time_array[1].split(':');\r\n    const game_endtime_array = [...game_starttime_array];\r\n    game_endtime_array[0] = (parseInt(game_endtime_array[0]) + 2).toString();\r\n    const game_endtime = game_endtime_array.join(':');\r\n    const game_end_datetime = [game_date_time_array[0], game_endtime].join('T');\r\n    if (curr_datetime > game_end_datetime)\r\n        return 'finished';\r\n    else if (curr_datetime > game_datetime && curr_datetime < game_end_datetime)\r\n        return 'in_progress';\r\n    else\r\n        return 'not_started';\r\n}\r\n\r\n\r\nclass LeaguesContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            manager_ids: [],\r\n            league_name: '',\r\n            league_id: undefined,\r\n            league_info: undefined,\r\n            league_table_dict: undefined,\r\n            league_squads_dict: undefined,\r\n            live_data_dict: undefined,\r\n            path: undefined\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.curr_gw && !this.props.loading_curr_gw)\r\n            this.props.fetch_curr_gw();  \r\n        this.setState({\r\n            league_id: this.props.match.params.league_id,\r\n            path: this.props.match.url\r\n        }, () => {\r\n            if (!this.props.league_info_data && !this.props.loading_league_info) {\r\n                this.props.fetch_league_info(this.state.league_id);  \r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.curr_gw && prevState.curr_gw !== this.props.curr_gw) {\r\n            const { curr_gw } = this.props;\r\n            if (!this.props.loading_live_data)\r\n                this.props.fetch_live_data(curr_gw);\r\n            if (!this.props.squads_for_league_id_data && !this.props.loading_squads_for_league_id)\r\n                this.props.fetch_squads_for_league_id(this.state.league_id, curr_gw);\r\n            this.setState({\r\n                curr_gw: curr_gw\r\n            });\r\n        }\r\n\r\n        if (this.props.league_info_data && prevState.league_info !== this.props.league_info_data){\r\n            this.setState({\r\n                league_info: this.props.league_info_data,\r\n                manager_ids: this.props.league_info_data.manager_ids,\r\n                league_name: this.props.league_info_data.name\r\n            }, () => {\r\n                const league_table_dict = this.create_league_table_dict(this.props.league_info_data);\r\n                if(league_table_dict) {\r\n                    this.setState({\r\n                        league_table_dict: league_table_dict\r\n                    });\r\n                }\r\n            });  \r\n        }\r\n        \r\n        if (this.props.live_data && prevProps.live_data !== this.props.live_data){\r\n            const live_data_dict = create_lookup_dict(this.props.live_data.elements, 'id');\r\n            this.setState({\r\n                live_data_dict: live_data_dict\r\n            }, () => {\r\n                this.calculate_league_table_dict(this.state.league_table_dict, this.state.live_data_dict, this.state.squads_for_league_id)\r\n            });\r\n        }\r\n\r\n        if (this.props.squads_for_league_id_data && prevState.squads_for_league_id !== this.props.squads_for_league_id_data){\r\n            this.setState({\r\n                squads_for_league_id: this.props.squads_for_league_id_data\r\n            }, () => {\r\n                this.calculate_league_table_dict(this.state.league_table_dict, this.state.live_data_dict, this.state.squads_for_league_id);\r\n            });\r\n        }\r\n    }\r\n\r\n    calculate_league_table_dict(league_table_dict, live_data_dict, squads_for_league_id) {\r\n        const league_squads_dict = this.create_league_squads_dict(league_table_dict, live_data_dict, squads_for_league_id);\r\n        if (league_squads_dict) {\r\n            this.setState({\r\n                league_squads_dict: league_squads_dict\r\n            }, () => {\r\n                const result = this.calcSubstitutesPoints(league_table_dict, league_squads_dict);\r\n                this.setState({\r\n                    league_table_dict: result.league_table_dict,\r\n                    league_squads_dict: result.league_squads_dict\r\n                }, () => {\r\n                    const league_table_dict = this.calcTotalPoints(this.state.manager_ids, this.state.league_table_dict, \r\n                                                                            league_squads_dict, live_data_dict);\r\n                    const new_manager_ids = this.sort_manager_ids_by_total_pts(league_table_dict);\r\n                    if(league_table_dict) {\r\n                        this.setState({\r\n                            league_table_dict: league_table_dict,\r\n                            manager_ids: new_manager_ids\r\n                        });\r\n                    }\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    captainDidNotPlay(squad) {\r\n        for (const player of squad) {\r\n            if (player.captain === true) {\r\n                return player.did_play === false;\r\n            }   \r\n        };\r\n    }\r\n    \r\n    \r\n    create_league_table_dict(league_info_data) {\r\n        if (!league_info_data) {\r\n            return undefined;\r\n        }\r\n    \r\n        const empty_table_obj = {\r\n            rank: null,\r\n            team: '',\r\n            manager: '',\r\n            prev_pts: null,\r\n            curr_pts: null,\r\n            pts_deducted: null,\r\n            sub_pts: null,\r\n            total_pts: null,\r\n            chip_status: null\r\n        }\r\n    \r\n        const league_table_dict = {};\r\n        const manager_data = league_info_data.managers_curr_gw_info;\r\n        manager_data.forEach(x => {\r\n            const manager_id = x.manager_id; \r\n            const d = {\r\n                ...empty_table_obj,\r\n                team: x.team_name.replace(/[^ -~]+/g, \"\"),\r\n                manager: x.manager_name,    \r\n                last_rank: x.last_rank,\r\n                rank: x.rank,\r\n                pts_deducted: x.points_deducted,\r\n                prev_pts: x.prev_gw_points,\r\n                chip_status: x.chip_status\r\n            };\r\n            league_table_dict[manager_id] = d;\r\n        });\r\n        return league_table_dict;\r\n    }\r\n    \r\n    \r\n    create_league_squads_dict(league_table_dict, live_data_dict, squads_for_league_id) {\r\n        if (!league_table_dict || !live_data_dict || !squads_for_league_id || Object.keys(live_data_dict).length === 0) {\r\n            return undefined;\r\n        }\r\n        const data = squads_for_league_id;\r\n        Object.keys(data).forEach(manager_id => {\r\n            data[manager_id].squad.curr_gw_game = data[manager_id].squad.forEach((player, idx) => {\r\n                const new_player_dict = {...player};\r\n                new_player_dict.curr_gw_game = player.curr_gw_game.map(game => {\r\n                    const d = {...game};\r\n                    d.game_status = get_game_status(game.datetime);\r\n                    if (game.team_a_name === player.team_name) {\r\n                        d.opposition = game.team_h_name;\r\n                    }\r\n                    else {\r\n                        d.opposition = game.team_a_name;\r\n                    } \r\n                    return d;\r\n                });\r\n                data[manager_id].squad[idx] = {...new_player_dict};\r\n            });\r\n        });\r\n\r\n        const league_squads_dict = {}\r\n        for (const manager_id of Object.keys(data)) {\r\n            const manager_data = {...data[manager_id]};\r\n            manager_data.squad.forEach((player_info, i) => {\r\n                manager_data.squad[i] = {...player_info}\r\n                manager_data.squad[i].stats = live_data_dict[player_info.player_id].stats\r\n                manager_data.squad[i].explain = live_data_dict[player_info.player_id].explain\r\n            })\r\n            manager_data.squad.forEach(player => {\r\n                if (player.captain === true) {\r\n                    manager_data.captain_status = league_table_dict[manager_id].chip_status === '3xc' ? '3xC' : '2xC';\r\n                    const captains_games_all_finished = player.curr_gw_game.every(game => game.game_status === 'finished');\r\n                    if (captains_games_all_finished) {\r\n                        manager_data.captain_did_not_play = player.stats.minutes === 0;\r\n                        if (manager_data.captain_did_not_play) {\r\n                            manager_data.captain_status = league_table_dict[manager_id].chip_status === '3xc' ? '3xV' : '2xV';\r\n                        }\r\n                    }\r\n                    else {\r\n                        manager_data.captain_did_not_play = undefined;\r\n                    }\r\n                }\r\n            });\r\n            league_squads_dict[manager_id] = manager_data;\r\n        }\r\n        return league_squads_dict;\r\n    }\r\n    \r\n    \r\n    calcTotalPoints(manager_ids, league_table_dict, league_squads_dict, live_data_dict) {\r\n        if(![manager_ids, league_table_dict, league_squads_dict, live_data_dict].every(v => v)) {\r\n            return undefined;\r\n        }\r\n        manager_ids.forEach(manager_id => {\r\n            let curr_points = 0;\r\n            const chip_status = league_squads_dict[manager_id].chip_status;\r\n            league_table_dict[manager_id].pts_deducted = -1 * league_squads_dict[manager_id].points_deducted;\r\n            league_squads_dict[manager_id].squad.forEach(player => {                    \r\n                const player_id = player.player_id;\r\n                let points = live_data_dict[player_id].stats.total_points;\r\n                if (player.captain === true && league_squads_dict[manager_id].captain_did_not_play !== true) {\r\n                    points = chip_status === '3xc' ? points * 3 : points * 2;\r\n                }\r\n                else if (player.vice_captain === true && league_squads_dict[manager_id].captain_did_not_play) {\r\n                    points = chip_status === '3xc' ? points * 3 : points * 2;\r\n                }\r\n                else if (player.on_bench === true && chip_status !== 'bboost') {\r\n                    points = 0;\r\n                }\r\n                curr_points += points;\r\n            });\r\n            league_table_dict[manager_id].curr_pts = curr_points;\r\n            league_table_dict[manager_id].total_pts =   league_table_dict[manager_id].prev_pts \r\n                                                            + curr_points\r\n                                                            + league_table_dict[manager_id].sub_pts\r\n                                                            + league_table_dict[manager_id].pts_deducted;                                                                                  \r\n        });\r\n        return league_table_dict;\r\n    }\r\n    \r\n    add_did_play_property_to_squads(league_squads_dict) {\r\n        for (const manager_id in league_squads_dict) {\r\n            for (let i=0; i<league_squads_dict[manager_id].squad.length; i++) {\r\n                const player_dict = {...league_squads_dict[manager_id].squad[i]};\r\n                const did_not_play_array = player_dict.curr_gw_game.map(game_dict => {\r\n                    if (Object.keys(game_dict).length === 0) {\r\n                        return true;\r\n                    }\r\n                    else if(get_game_status(game_dict.datetime) === 'finished') {\r\n                        return player_dict.stats.minutes === 0;\r\n                    }\r\n                    return false;\r\n                })\r\n                if ((did_not_play_array.every(x => x === true) && did_not_play_array.length === player_dict.curr_gw_game.length) \r\n                || did_not_play_array === []) {\r\n                    player_dict.did_play = false;\r\n                }\r\n                else if (player_dict.stats.minutes > 0) {\r\n                    player_dict.did_play = true;\r\n                }\r\n                else {\r\n                    player_dict.did_play = undefined;\r\n                }\r\n                league_squads_dict[manager_id].squad[i] = player_dict;\r\n            }\r\n        }\r\n        return league_squads_dict;\r\n    }\r\n    \r\n    \r\n    calcSubstitutesPoints(league_table_dict, league_squads_dict) {  \r\n            \r\n        function check_team_meets_squad_criteria(firstXI) {\r\n            // \"team can play in any formation providing that 1 goalkeeper, at least 3 defenders and at least 1 forward\"\r\n            const num_positions = { 'GK': 0, 'DEF': 0, 'MID': 0, 'FWD': 0};\r\n            firstXI.forEach(player => num_positions[player.position]++);\r\n            const verification = num_positions.GK === 1 && num_positions.DEF >= 3 && num_positions.FWD >= 1;\r\n            return verification;\r\n        }\r\n    \r\n        league_squads_dict = this.add_did_play_property_to_squads(league_squads_dict);\r\n        for (const manager_id in league_squads_dict) {\r\n            let firstXI = league_squads_dict[manager_id].squad.filter(x => x.on_bench === false);\r\n            const subs  = league_squads_dict[manager_id].squad.filter(x => x.on_bench === true);\r\n            const firstXI_player_ids_set = new Set();\r\n            firstXI.forEach(x => firstXI_player_ids_set.add(x.player_id));\r\n            let num_subs_points = 0;\r\n            for (let i=0; i<firstXI.length; i++) {\r\n                if (firstXI[i].did_play === false) {\r\n                    for (let j=0; j<subs.length; j++) {\r\n                        if (subs[j].did_play === true) {\r\n                            const new_firstXI = [...firstXI];\r\n                            if (firstXI[i].on_bench === true) {\r\n                                continue;   // player in firstXI was a sub so must've been added already, so don't remove                  \r\n                            }\r\n                            if (firstXI_player_ids_set.has(subs[j].player_id)) {\r\n                                continue;   // player_id already in player_ids_set => avoids adding the same sub multiple times\r\n                            }\r\n                            new_firstXI[i] = subs[j];\r\n                            if(check_team_meets_squad_criteria(new_firstXI)) {\r\n                                firstXI = [...new_firstXI];\r\n                                firstXI_player_ids_set.clear();\r\n                                firstXI.forEach(x => firstXI_player_ids_set.add(x.player_id));\r\n                                num_subs_points += subs[j].stats.total_points;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            league_table_dict[manager_id].sub_pts = num_subs_points;\r\n            league_squads_dict[manager_id].final_firstXI = firstXI;\r\n        }\r\n        return {\r\n            league_table_dict: league_table_dict,\r\n            league_squads_dict: league_squads_dict\r\n        };\r\n    }\r\n    \r\n    \r\n    sort_manager_ids_by_total_pts(league_table_dict) {\r\n        const manager_ids = Object.keys(league_table_dict);\r\n        let manager_ids_points = [];\r\n        for (const manager_id of manager_ids) {\r\n            const d = {}\r\n            d.manager_id = manager_id;\r\n            d.total_points = league_table_dict[manager_id].total_pts; \r\n            manager_ids_points.push(d);\r\n        }\r\n        manager_ids_points = sort_LOD_by_key(manager_ids_points, 'total_points', false);\r\n        const new_manager_ids = manager_ids_points.map(x => x.manager_id);\r\n        return new_manager_ids\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"page-container\">\r\n                <Switch>\r\n                    <Route exact path=\"/leagues/:league_id\">\r\n                        <LeagueTable \r\n                            curr_gw={this.state.curr_gw}\r\n                            league_id={this.state.league_id}\r\n                            manager_ids={this.state.manager_ids}\r\n                            league_table_dict={this.state.league_table_dict}\r\n                            league_name={this.state.league_name}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/leagues/:league_id/:manager_id\">\r\n                        <Squad \r\n                            curr_gw={this.state.curr_gw}\r\n                            league_id={this.state.league_id}\r\n                            league_name={this.state.league_name}\r\n                            squads_dict={this.state.league_squads_dict} \r\n                            league_table_dict={this.state.league_table_dict}\r\n                            teams={this.props.teams}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(LeaguesContainer);","import React from 'react';\r\nimport './Glossary.css';\r\n\r\n\r\nconst terms = {\r\n    'A': 'Assists',\r\n    'Bonus': 'Bonus points',\r\n    'CS': 'Clean sheets',\r\n    'D': 'Games drawn',\r\n    'difficulty': 'Difficulty of forthcoming games, calculated separately for attackers and defenders',\r\n    'difficulty GF': \"Calculated difficulty to play against for a team's attackers. 0 = easy, 10 = hard\",\r\n    'difficulty GA': \"Calculated difficulty to play against for a team's defenders. 0 = easy, 10 = hard\",\r\n    'form mins': 'Recent form of minutes played',\r\n    'form pts': 'Recent form of Points',\r\n    'G': 'Goals',\r\n    'GA': 'Goals against',\r\n    'GC': 'Goals conceded',\r\n    'GF': 'Goals for',\r\n    'GW': 'Game week',\r\n    'L': 'Games lost',\r\n    'ma(Pts,L)': 'Long (10 weeks) moving average of Points',\r\n    'ma(Pts,S)': 'Short (5 weeks) moving average of Points',\r\n    'ma(GA,L)': 'Long (10 weeks) moving average of Goals Against',\r\n    'ma(GA,S)': 'Short (5 weeks) moving average of Goals Against',\r\n    'ma(GF,L)': 'Long (10 weeks) moving average of Goals For',\r\n    'ma(GF,S)': 'Short (5 weeks) moving average of Goals For',\r\n    'mins': 'Minutes played',\r\n    'mins/(G+A)': 'Average number of minutes players per goal or assist',\r\n    'OG': 'Own goals',\r\n    'P': 'Games played',\r\n    'Pens missed': 'Penalties missed',\r\n    'Pens saved': 'Penalties saved',\r\n    'Price': 'Price £m',\r\n    'Pts': 'Points',\r\n    'Pts deducted': 'Points deducted e.g. for buying more players than your quota for the week',\r\n    'pts/90min': 'Average points per 90 minutes played',\r\n    'RC': 'Red cards',\r\n    'Sub pts': 'Points gained by substitutes',\r\n    'Total pts': 'Total points for the season',\r\n    'Transfers (k)': 'Net transfers for a game week = transfers in - transfers out (000s)',\r\n    'W': 'Games won',\r\n    'YC': 'Yellow cards',\r\n}\r\n\r\n\r\nconst Glossary = () => {\r\n    document.title = 'Fantasy Football Stats | Glossary';\r\n\r\n    const get_table_rows = () => Object.keys(terms).map(key => {\r\n        return (\r\n            <tr key={key}>\r\n                <td key={`${key}-term`} className=\"term-column\">{key}</td>\r\n                <td key={`${key}-descrptn`} className=\"description-column\">{terms[key]}</td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return (  \r\n        <div className=\"glossary-container\">\r\n            <h3>Glossary</h3>\r\n            <div className=\"terms-table-container\">\r\n                <table className=\"styled-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Term</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { get_table_rows() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Glossary;","import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Test = () => {\r\n\r\n    const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];\r\n    const data = {\r\n        labels: labels,\r\n        datasets: [{\r\n            label: 'My First Dataset',\r\n            data: [65, 59, 80, 81, 56, 55, 40],\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.6)',\r\n                'rgba(255, 159, 64, 0.6)',\r\n                'rgba(255, 205, 86, 0.6)',\r\n                'rgba(75, 192, 192, 0.6)',\r\n                'rgba(54, 162, 235, 0.6)',\r\n                'rgba(153, 102, 255, 0.6)',\r\n                'rgba(201, 203, 207, 0.6)'\r\n            ],\r\n            borderColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(255, 159, 64)',\r\n                'rgb(255, 205, 86)',\r\n                'rgb(75, 192, 192)',\r\n                'rgb(54, 162, 235)',\r\n                'rgb(153, 102, 255)',\r\n                'rgb(201, 203, 207)'\r\n            ],\r\n            borderWidth: 1\r\n        }]\r\n    };\r\n\r\n    const config = {\r\n        data: data,\r\n        options: {\r\n          maintainAspectRatio: false\r\n        },\r\n    };\r\n\r\n    return (  \r\n        <div>\r\n            <h3>Test works!</h3>\r\n            <div>\r\n                <Pie\r\n                    data={config.data}\r\n                    width={300}\r\n                    height={300}\r\n                    redraw={false}\r\n                    options={config.options}\r\n                />\r\n                <FontAwesomeIcon style={{color: 'red', fontSize: '40px'}} icon={faBars} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Test;\r\n\r\n ","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/configureStore';\n\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Players from './components/Players';\nimport PlayerInfo from './components/PlayerInfo';\nimport TeamsContainer from './components/TeamsContainer';\nimport Fixtures from './components/Fixtures';\nimport FileNotFound from './components/FileNotFound';\nimport LeaguesContainer from './components/LeaguesContainer';\nimport Glossary from './components/Glossary';\nimport Test from './components/Test';\nimport { debounce } from './misc_functions';\nimport './App.css';\n\nimport { fetch_curr_gw, fetch_team_ids } from './redux/actionCreators';\n\nconst RERENDER_DELAY_MS = 250;\n\nstore.dispatch(fetch_curr_gw());\nstore.dispatch(fetch_team_ids());\n\n\nfunction App() {\n  const [window_width, set_window_width] = useState();\n  useEffect(() => {\n    window.addEventListener('resize', debounce(handleResize, RERENDER_DELAY_MS));\n    return () => window.removeEventListener('resize', debounce(handleResize, RERENDER_DELAY_MS));\n  }, []);\n  const handleResize = () => set_window_width(window.innerWidth);\n  useEffect(() => console.log('window_width', window_width), [window_width]);\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <BrowserRouter>\n            <Navbar />\n            <main>\n              <Switch>\n                  <Route exact path=\"/\">\n                    <Redirect to=\"/players\" />\n                  </Route>\n                  <Route path=\"/players/:web_name_id\"           component={PlayerInfo} />\n                  <Route path=\"/players\"                        component={Players} />\n                  <Route path=\"/teams/:team_name?\"              component={TeamsContainer} />\n                  <Route path=\"/fixtures\"                       component={Fixtures} />\n                  <Route path=\"/leagues/:league_id\"             component={LeaguesContainer} />\n                  <Route path=\"/glossary\"                       component={Glossary} />\n                  <Route path=\"/test\"                           component={Test} />\n                  <Route path=\"*\"                               component={FileNotFound} />\n              </Switch>\n            </main>      \n            <Footer />\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}